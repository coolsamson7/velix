// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by velix registry builder
// ignore_for_file: unnecessary_import, unused_local_variable

import 'package:velix/velix.dart';
import 'type_descriptor_test.dart';
import 'package:velix/reflectable/reflectable.dart';

void registerTypes() {
  var baseDescriptor =  type<Base>(
    location: 'asset:velix/test/type_descriptor_test.dart:7:1',
    params: [
      param<String>('id', isNamed: true, isRequired: true)
    ],
    constructor: ({String id = ''}) => Base(id: id),
    fromMapConstructor: (Map<String,dynamic> args) => Base(id: args['id'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => Base(id: args[0] as String? ?? ''),
    fields: [
      field<Base,String>('id',
        type: StringType().minLength(10).maxLength(10),
        getter: (obj) => obj.id,
        setter: (obj, value) => (obj as Base).id = value,
      )
    ],
  );

  type<Derived>(
    location: 'asset:velix/test/type_descriptor_test.dart:15:1',
    superClass: baseDescriptor,
    params: [
      param<int>('number', isNamed: true, isRequired: true), 
      param<String>('id', isNamed: true, isRequired: true)
    ],
    constructor: ({int number = 0, String id = ''}) => Derived(number: number, id: id),
    fromMapConstructor: (Map<String,dynamic> args) => Derived(number: args['number'] as int? ?? 0, id: args['id'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => Derived(number: args[0] as int? ?? 0, id: args[1] as String? ?? ''),
    fields: [
      field<Derived,int>('number',
        type: IntType().greaterThan(0),
        getter: (obj) => obj.number,
        setter: (obj, value) => (obj as Derived).number = value,
      )
    ],
  );

  // watchout: is part of a cycle
  type<Lazy>(
    location: 'asset:velix/test/type_descriptor_test.dart:23:1',
    params: [
      param<Lazy>('parent', isNamed: true, isRequired: true)
    ],
    constructor: ({required Lazy parent}) => Lazy(parent: parent),
    fromMapConstructor: (Map<String,dynamic> args) => Lazy(parent: args['parent'] as Lazy),
    fromArrayConstructor: (List<dynamic> args) => Lazy(parent: args[0] as Lazy),
    fields: [
      field<Lazy,Lazy>('parent',
        getter: (obj) => obj.parent,
        setter: (obj, value) => (obj as Lazy).parent = value,
        isNullable: true
      )
    ],
  );

  TypeDescriptor.verify();
}
