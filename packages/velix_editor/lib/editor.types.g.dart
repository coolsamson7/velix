// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by velix registry builder
// ignore_for_file: unnecessary_import, unused_local_variable

import 'package:flutter/cupertino.dart' show StatefulWidget;
import 'package:flutter/material.dart' show Colors, BorderStyle;
import 'package:velix/velix.dart';
import 'package:velix_editor/commands/command_stack.dart' show CommandStack;
import 'package:velix_di/di/di.dart' show Injectable, Inject, Environment, Module, OnInit, OnDestroy;
import 'package:velix_editor/editor/editor.dart' show Address, User, Page, EditorScreenState;
import 'package:velix/reflectable/reflectable.dart' show Dataclass, Attribute;
import 'package:velix_i18n/i18n/locale.dart' show LocaleManager;
import 'dart:async' show Future;
import 'package:velix_editor/editor_module.dart' show EditorModule;
import 'package:velix_editor/metadata/properties/properties.dart' show ColorConvert, FontWeightConvert, FontStyleConvert, Value, ValueType, Insets, Border, BorderStyle, Font;
import 'package:velix_editor/metadata/annotations.dart' show DeclareProperty, DeclareWidget;
import 'dart:ui' show Color, FontWeight, FontStyle;
import 'package:velix_editor/property_panel/editor/font_editor.dart' show FontEditorBuilder;
import 'package:velix_editor/metadata/type_registry.dart' show TypeRegistry;
import 'package:velix_editor/metadata/widget_data.dart' show Cell, WidgetData;
import 'package:velix_mapper/mapper/json.dart' show JsonSerializable, Json;
import 'package:velix_editor/theme/abstract_widget.dart' show AbstractWidgetState;
import 'package:velix_editor/metadata/widgets/button.dart' show ButtonWidgetData;
import 'package:velix_editor/property_panel/editor/code_editor.dart' show CodeEditorBuilder;
import 'package:velix_editor/validate/validate.dart' show ExpressionPropertyValidator, PropertyValidator, WidgetValidator, ValuePropertyValidator;
import 'package:velix_editor/metadata/widgets/column.dart' show ColumnWidgetData;
import 'package:flutter/src/rendering/flex.dart' show MainAxisAlignment, CrossAxisAlignment, MainAxisSize;
import 'package:velix_editor/metadata/widgets/container.dart' show ContainerWidgetData;
import 'package:velix_editor/metadata/widgets/grid.dart' show GridWidgetData;
import 'package:velix_editor/metadata/widgets/label.dart' show LabelWidgetData;
import 'package:velix_editor/metadata/widgets/row.dart' show RowWidgetData;
import 'package:velix_editor/metadata/widgets/stack.dart' show StackWidgetData;
import 'package:velix_editor/metadata/widgets/switch.dart' show SwitchWidgetData;
import 'package:velix_editor/metadata/widgets/text.dart' show TextWidgetData;
import 'package:velix_editor/persistence/persistence.dart' show WidgetLoader, WidgetExporter;
import 'package:velix_editor/property_panel/editor/alignment_editor.dart' show CrossAxisAlignmentBuilder, MainAxisAlignmentBuilder, MainAxisSizeBuilder, BorderStyleBuilder;
import 'package:velix_editor/property_panel/editor/bool_editor.dart' show BooleanEditorBuilder;
import 'package:velix_editor/property_panel/editor/color_editor.dart' show ColorEditorBuilder;
import 'package:velix_editor/property_panel/editor/font_style_editor.dart' show FontStyleEditorBuilder;
import 'package:velix_editor/property_panel/editor/font_weight_editor.dart' show FontWeightEditorBuilder;
import 'package:velix_editor/property_panel/editor/int_editor.dart' show IntEditorBuilder;
import 'package:velix_editor/property_panel/editor/paddding_editor.dart' show PaddingEditorBuilder;
import 'package:velix_editor/property_panel/editor/string_editor.dart' show StringEditorBuilder;
import 'package:velix_editor/property_panel/editor/value_editor.dart' show ValueEditorBuilder;
import 'package:velix_editor/property_panel/editor_builder.dart' show PropertyEditorBuilder;
import 'package:velix_editor/property_panel/editor_registry.dart' show PropertyEditorBuilderFactory;
import 'package:velix_editor/property_panel/enum_editor.dart' show AbstractEnumBuilder;
import 'package:velix_editor/theme/theme.dart' show WidgetFactory;
import 'package:velix_editor/theme/widget_builder.dart' show WidgetBuilder;
import 'package:velix_editor/theme/widgets/button_widget.dart' show ButtonWidgetBuilder, ButtonEditWidgetBuilder;
import 'package:velix_editor/theme/widgets/column_widget.dart' show ColumnEditWidgetBuilder, ColumnWidgetBuilder;
import 'package:velix_editor/theme/widgets/container_widget.dart' show ContainerEditWidgetBuilder, ContainerWidgetBuilder;
import 'package:velix_editor/theme/widgets/grid_widget.dart' show GridEditWidgetBuilder, GridWidgetBuilder;
import 'package:velix_editor/theme/widgets/label_widget.dart' show LabelWidgetBuilder, EditLabelWidgetBuilder;
import 'package:velix_editor/theme/widgets/row_widget.dart' show RowEditWidgetBuilder, RowWidgetBuilder;
import 'package:velix_editor/theme/widgets/stack_widget.dart' show StackEditWidgetBuilder, StackWidgetBuilder;
import 'package:velix_editor/theme/widgets/switch_widget.dart' show SwitchWidgetBuilder, EditSwitchWidgetBuilder;
import 'package:velix_editor/theme/widgets/text_widget.dart' show TextWidgetBuilder, TextEditWidgetBuilder;
import 'package:velix_editor/util/message_bus.dart' show MessageBus;
import 'package:velix_ui/module.dart';

void registerEditorTypes() {
  type<CommandStack>(
    location: 'package:velix_editor/commands/command_stack.dart:11:1',
    annotations: [
      Injectable(scope: "environment", eager: false)
    ],
    constructor: () => CommandStack(),
    fromMapConstructor: (Map<String,dynamic> args) => CommandStack(),
    fromArrayConstructor: (List<dynamic> args) => CommandStack(),
  );

  type<Address>(
    location: 'package:velix_editor/editor/editor.dart:237:1',
    params: [
      param<String>('city', isNamed: true, isRequired: true), 
      param<String>('street', isNamed: true, isRequired: true)
    ],
    constructor: ({String city = '', String street = ''}) => Address(city: city, street: street),
    fromMapConstructor: (Map<String,dynamic> args) => Address(city: args['city'] as String? ?? '', street: args['street'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => Address(city: args[0] as String? ?? '', street: args[1] as String? ?? ''),
    fields: [
      field<Address,String>('city',
        getter: (obj) => obj.city,
        setter: (obj, value) => (obj as Address).city = value,
      ), 
      field<Address,String>('street',
        getter: (obj) => obj.street,
        setter: (obj, value) => (obj as Address).street = value,
      )
    ],
    methods: [
      method<Address,String>('hello',
        annotations: [
          Inject()
        ],
        parameters: [
          param<String>('message', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as Address).hello(args[1])
      )
    ],
  );

  type<Page>(
    location: 'package:velix_editor/editor/editor.dart:283:1',
    annotations: [
      Injectable()
    ],
    constructor: () => Page(),
    fromMapConstructor: (Map<String,dynamic> args) => Page(),
    fromArrayConstructor: (List<dynamic> args) => Page(),
    fields: [
      field<Page,User>('user',
        getter: (obj) => obj.user,
        setter: (obj, value) => (obj as Page).user = value,
      )
    ],
    methods: [
      method<Page,void>('setup',
        annotations: [
          Inject()
        ],
        invoker: (List<dynamic> args)=> (args[0] as Page).setup()
      )
    ],
  );

  type<EditorScreenState>(
    location: 'package:velix_editor/editor/editor.dart:336:1',
    constructor: () => EditorScreenState(),
    fromMapConstructor: (Map<String,dynamic> args) => EditorScreenState(),
    fromArrayConstructor: (List<dynamic> args) => EditorScreenState(),
    fields: [
      field<EditorScreenState,Environment>('environment',
        getter: (obj) => obj.environment,
      ), 
      field<EditorScreenState,CommandStack>('commandStack',
        getter: (obj) => obj.commandStack,
      ), 
      field<EditorScreenState,bool>('edit',
        getter: (obj) => obj.edit,
        setter: (obj, value) => (obj as EditorScreenState).edit = value,
      ), 
      field<EditorScreenState,LocaleManager>('localeManager',
        getter: (obj) => obj.localeManager,
      )
    ],
    methods: [
      method<EditorScreenState,Future<void>>('open',
        annotations: [
          Method()
        ],
        isAsync: true,
        invoker: (List<dynamic> args)async => (args[0] as EditorScreenState).open()
      ), 
      method<EditorScreenState,void>('save',
        annotations: [
          Method()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorScreenState).save()
      ), 
      method<EditorScreenState,void>('revert',
        annotations: [
          Method()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorScreenState).revert()
      ), 
      method<EditorScreenState,void>('undo',
        annotations: [
          Method()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorScreenState).undo()
      ), 
      method<EditorScreenState,void>('play',
        annotations: [
          Method()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorScreenState).play()
      )
    ],
  );

  type<EditorModule>(
    location: 'package:velix_editor/editor_module.dart:6:1',
    annotations: [
      Module(imports: [UIModule])
    ],
    constructor: () => EditorModule(),
    fromMapConstructor: (Map<String,dynamic> args) => EditorModule(),
    fromArrayConstructor: (List<dynamic> args) => EditorModule(),
    methods: [
      method<EditorModule,void>('onInit',
        annotations: [
          OnInit()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorModule).onInit()
      ), 
      method<EditorModule,void>('onDestroy',
        annotations: [
          OnDestroy()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorModule).onDestroy()
      )
    ],
  );

  type<ColorConvert>(
    location: 'package:velix_editor/metadata/properties/properties.dart:9:1',
    constructor: () => ColorConvert(),
    fromMapConstructor: (Map<String,dynamic> args) => ColorConvert(),
    fromArrayConstructor: (List<dynamic> args) => ColorConvert(),
  );

  type<FontWeightConvert>(
    location: 'package:velix_editor/metadata/properties/properties.dart:26:1',
    constructor: () => FontWeightConvert(),
    fromMapConstructor: (Map<String,dynamic> args) => FontWeightConvert(),
    fromArrayConstructor: (List<dynamic> args) => FontWeightConvert(),
  );

  type<FontStyleConvert>(
    location: 'package:velix_editor/metadata/properties/properties.dart:40:1',
    constructor: () => FontStyleConvert(),
    fromMapConstructor: (Map<String,dynamic> args) => FontStyleConvert(),
    fromArrayConstructor: (List<dynamic> args) => FontStyleConvert(),
  );

  type<Insets>(
    location: 'package:velix_editor/metadata/properties/properties.dart:76:1',
    params: [
      param<int>('left', isNamed: true, isNullable: true, defaultValue: 0), 
      param<int>('top', isNamed: true, isNullable: true, defaultValue: 0), 
      param<int>('right', isNamed: true, isNullable: true, defaultValue: 0), 
      param<int>('bottom', isNamed: true, isNullable: true, defaultValue: 0)
    ],
    constructor: ({int left = 0, int top = 0, int right = 0, int bottom = 0}) => Insets(left: left, top: top, right: right, bottom: bottom),
    fromMapConstructor: (Map<String,dynamic> args) => Insets(left: args['left'] as int? ?? 0, top: args['top'] as int? ?? 0, right: args['right'] as int? ?? 0, bottom: args['bottom'] as int? ?? 0),
    fromArrayConstructor: (List<dynamic> args) => Insets(left: args[0] as int? ?? 0, top: args[1] as int? ?? 0, right: args[2] as int? ?? 0, bottom: args[3] as int? ?? 0),
    fields: [
      field<Insets,int>('left',
        annotations: [
          DeclareProperty(label: "editor:properties.insets.left")
        ],
        getter: (obj) => obj.left,
        setter: (obj, value) => (obj as Insets).left = value,
      ), 
      field<Insets,int>('top',
        annotations: [
          DeclareProperty(label: "editor:properties.insets.top")
        ],
        getter: (obj) => obj.top,
        setter: (obj, value) => (obj as Insets).top = value,
      ), 
      field<Insets,int>('right',
        annotations: [
          DeclareProperty(label: "editor:properties.insets.right")
        ],
        getter: (obj) => obj.right,
        setter: (obj, value) => (obj as Insets).right = value,
      ), 
      field<Insets,int>('bottom',
        annotations: [
          DeclareProperty(label: "editor:properties.insets.bottom")
        ],
        getter: (obj) => obj.bottom,
        setter: (obj, value) => (obj as Insets).bottom = value,
      )
    ],
  );

  type<Font>(
    location: 'package:velix_editor/metadata/properties/properties.dart:116:1',
    params: [
      param<FontWeight>('weight', isNamed: true, isNullable: true, defaultValue: FontWeight.normal), 
      param<FontStyle>('style', isNamed: true, isNullable: true, defaultValue: FontStyle.normal), 
      param<String>('family', isNamed: true, isNullable: true, defaultValue: "Arial"), 
      param<int>('size', isNamed: true, isNullable: true, defaultValue: 16)
    ],
    constructor: ({FontWeight weight = FontWeight.normal, FontStyle style = FontStyle.normal, String family = "Arial", int size = 16}) => Font(weight: weight, style: style, family: family, size: size),
    fromMapConstructor: (Map<String,dynamic> args) => Font(weight: args['weight'] as FontWeight? ?? FontWeight.normal, style: args['style'] as FontStyle? ?? FontStyle.normal, family: args['family'] as String? ?? "Arial", size: args['size'] as int? ?? 16),
    fromArrayConstructor: (List<dynamic> args) => Font(weight: args[0] as FontWeight? ?? FontWeight.normal, style: args[1] as FontStyle? ?? FontStyle.normal, family: args[2] as String? ?? "Arial", size: args[3] as int? ?? 16),
    fields: [
      field<Font,String>('family',
        annotations: [
          DeclareProperty(label: "editor:properties.font.family", editor: FontEditorBuilder)
        ],
        getter: (obj) => obj.family,
        setter: (obj, value) => (obj as Font).family = value,
      ), 
      field<Font,FontWeight>('weight',
        annotations: [
          DeclareProperty(label: "editor:properties.font.weight")
        ],
        getter: (obj) => obj.weight,
        setter: (obj, value) => (obj as Font).weight = value,
      ), 
      field<Font,FontStyle>('style',
        annotations: [
          DeclareProperty(label: "editor:properties.font.style")
        ],
        getter: (obj) => obj.style,
        setter: (obj, value) => (obj as Font).style = value,
      ), 
      field<Font,int>('size',
        annotations: [
          DeclareProperty(label: "editor:properties.font.size")
        ],
        getter: (obj) => obj.size,
        setter: (obj, value) => (obj as Font).size = value,
      )
    ],
  );

  enumeration<ValueType>(
    name: 'package:velix_editor/metadata/properties/properties.dart.ValueType',
    values: ValueType.values
  );

  enumeration<BorderStyle>(
    name: 'package:velix_editor/metadata/properties/properties.dart.BorderStyle',
    values: BorderStyle.values
  );

  type<TypeRegistry>(
    location: 'package:velix_editor/metadata/type_registry.dart:13:1',
    annotations: [
      Injectable()
    ],
    constructor: () => TypeRegistry(),
    fromMapConstructor: (Map<String,dynamic> args) => TypeRegistry(),
    fromArrayConstructor: (List<dynamic> args) => TypeRegistry(),
    methods: [
      method<TypeRegistry,void>('setup',
        annotations: [
          OnInit()
        ],
        invoker: (List<dynamic> args)=> (args[0] as TypeRegistry).setup()
      )
    ],
  );

  type<Cell>(
    location: 'package:velix_editor/metadata/widget_data.dart:8:1',
    params: [
      param<int>('row', isNamed: true, isRequired: true), 
      param<int>('col', isNamed: true, isRequired: true)
    ],
    constructor: ({int row = 0, int col = 0}) => Cell(row: row, col: col),
    fromMapConstructor: (Map<String,dynamic> args) => Cell(row: args['row'] as int? ?? 0, col: args['col'] as int? ?? 0),
    fromArrayConstructor: (List<dynamic> args) => Cell(row: args[0] as int? ?? 0, col: args[1] as int? ?? 0),
    fields: [
      field<Cell,int>('row',
        annotations: [
          DeclareProperty()
        ],
        getter: (obj) => obj.row,
        setter: (obj, value) => (obj as Cell).row = value,
      ), 
      field<Cell,int>('col',
        annotations: [
          DeclareProperty()
        ],
        getter: (obj) => obj.col,
        setter: (obj, value) => (obj as Cell).col = value,
      )
    ],
  );

  var propertyEditorBuilderDescriptor =  type<PropertyEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor_builder.dart:9:1',
    annotations: [
      Injectable()
    ],
    isAbstract: true,
    methods: [
      method<PropertyEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as PropertyEditorBuilder).setup(args[1])
      )
    ],
  );

  type<PropertyEditorBuilderFactory>(
    location: 'package:velix_editor/property_panel/editor_registry.dart:6:1',
    annotations: [
      Injectable()
    ],
    constructor: () => PropertyEditorBuilderFactory(),
    fromMapConstructor: (Map<String,dynamic> args) => PropertyEditorBuilderFactory(),
    fromArrayConstructor: (List<dynamic> args) => PropertyEditorBuilderFactory(),
  );

  type<WidgetFactory>(
    location: 'package:velix_editor/theme/theme.dart:7:1',
    annotations: [
      Injectable()
    ],
    constructor: () => WidgetFactory(),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetFactory(),
    fromArrayConstructor: (List<dynamic> args) => WidgetFactory(),
  );

  var widgetBuilderDescriptor =  type<WidgetBuilder>(
    location: 'package:velix_editor/theme/widget_builder.dart:38:1',
    annotations: [
      Injectable(factory: false, eager: false)
    ],
    isAbstract: true,
    methods: [
      method<WidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as WidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<MessageBus>(
    location: 'package:velix_editor/util/message_bus.dart:7:1',
    annotations: [
      Injectable(scope: "environment", eager: false)
    ],
    constructor: () => MessageBus(),
    fromMapConstructor: (Map<String,dynamic> args) => MessageBus(),
    fromArrayConstructor: (List<dynamic> args) => MessageBus(),
  );

  var propertyValidatorDescriptor =  type<PropertyValidator>(
    location: 'package:velix_editor/validate/validate.dart:41:1',
    annotations: [
      Injectable(factory: false)
    ],
    isAbstract: true,
    methods: [
      method<PropertyValidator,void>('set',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetValidator>('validator', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as PropertyValidator).set(args[1])
      )
    ],
  );

  type<User>(
    location: 'package:velix_editor/editor/editor.dart:258:1',
    params: [
      param<String>('name', isNamed: true, isRequired: true), 
      param<Address>('address', isNamed: true, isRequired: true), 
      param<int>('age', isNamed: true, isRequired: true), 
      param<bool>('cool', isNamed: true, isRequired: true)
    ],
    constructor: ({String name = '', required Address address, int age = 0, bool cool = false}) => User(name: name, address: address, age: age, cool: cool),
    fromMapConstructor: (Map<String,dynamic> args) => User(name: args['name'] as String? ?? '', address: args['address'] as Address, age: args['age'] as int? ?? 0, cool: args['cool'] as bool? ?? false),
    fromArrayConstructor: (List<dynamic> args) => User(name: args[0] as String? ?? '', address: args[1] as Address, age: args[2] as int? ?? 0, cool: args[3] as bool? ?? false),
    fields: [
      field<User,String>('name',
        getter: (obj) => obj.name,
        setter: (obj, value) => (obj as User).name = value,
      ), 
      field<User,int>('age',
        getter: (obj) => obj.age,
        setter: (obj, value) => (obj as User).age = value,
      ), 
      field<User,Address>('address',
        getter: (obj) => obj.address,
        setter: (obj, value) => (obj as User).address = value,
      ), 
      field<User,bool>('cool',
        getter: (obj) => obj.cool,
        setter: (obj, value) => (obj as User).cool = value,
      )
    ],
    methods: [
      method<User,String>('hello',
        annotations: [
          Inject()
        ],
        parameters: [
          param<String>('message', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as User).hello(args[1])
      )
    ],
  );

  type<Value>(
    location: 'package:velix_editor/metadata/properties/properties.dart:61:1',
    params: [
      param<ValueType>('type', isNamed: true, isNullable: true, defaultValue: ValueType.value), 
      param<String>('value', isNamed: true, isNullable: true, defaultValue: "")
    ],
    constructor: ({ValueType type = ValueType.value, String value = ""}) => Value(type: type, value: value),
    fromMapConstructor: (Map<String,dynamic> args) => Value(type: args['type'] as ValueType? ?? ValueType.value, value: args['value'] as String? ?? ""),
    fromArrayConstructor: (List<dynamic> args) => Value(type: args[0] as ValueType? ?? ValueType.value, value: args[1] as String? ?? ""),
    fields: [
      field<Value,ValueType>('type',
        annotations: [
          DeclareProperty()
        ],
        getter: (obj) => obj.type,
        setter: (obj, value) => (obj as Value).type = value,
      ), 
      field<Value,String>('value',
        annotations: [
          DeclareProperty()
        ],
        getter: (obj) => obj.value,
        setter: (obj, value) => (obj as Value).value = value,
      )
    ],
  );

  type<Border>(
    location: 'package:velix_editor/metadata/properties/properties.dart:102:1',
    params: [
      param<Color>('color', isNamed: true, isNullable: true, defaultValue: Colors.white), 
      param<int>('width', isNamed: true, isNullable: true, defaultValue: 1), 
      param<BorderStyle>('style', isNamed: true, isNullable: true, defaultValue: BorderStyle.solid)
    ],
    constructor: ({Color color = Colors.white, int width = 1, BorderStyle style = BorderStyle.solid}) => Border(color: color, width: width, style: style),
    fromMapConstructor: (Map<String,dynamic> args) => Border(color: args['color'] as Color? ?? Colors.white, width: args['width'] as int? ?? 1, style: args['style'] as BorderStyle? ?? BorderStyle.solid),
    fromArrayConstructor: (List<dynamic> args) => Border(color: args[0] as Color? ?? Colors.white, width: args[1] as int? ?? 1, style: args[2] as BorderStyle? ?? BorderStyle.solid),
    fields: [
      field<Border,Color>('color',
        annotations: [
          DeclareProperty(label: "editor:properties.border.color")
        ],
        getter: (obj) => obj.color,
        setter: (obj, value) => (obj as Border).color = value,
      ), 
      field<Border,int>('width',
        annotations: [
          DeclareProperty(label: "editor:properties.border.width")
        ],
        getter: (obj) => obj.width,
        setter: (obj, value) => (obj as Border).width = value,
      ), 
      field<Border,BorderStyle>('style',
        annotations: [
          DeclareProperty(label: "editor:properties.border.style")
        ],
        getter: (obj) => obj.style,
        setter: (obj, value) => (obj as Border).style = value,
      )
    ],
  );

  type<WidgetLoader>(
    location: 'package:velix_editor/persistence/persistence.dart:9:1',
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => WidgetLoader(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetLoader(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => WidgetLoader(typeRegistry: args[0] as TypeRegistry),
  );

  type<WidgetExporter>(
    location: 'package:velix_editor/persistence/persistence.dart:48:1',
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => WidgetExporter(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetExporter(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => WidgetExporter(typeRegistry: args[0] as TypeRegistry),
  );

  type<WidgetValidator>(
    location: 'package:velix_editor/validate/validate.dart:149:1',
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('registry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry registry}) => WidgetValidator(registry: registry),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetValidator(registry: args['registry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => WidgetValidator(registry: args[0] as TypeRegistry),
  );

  var widgetDataDescriptor =  type<WidgetData>(
    location: 'package:velix_editor/metadata/widget_data.dart:20:1',
    annotations: [
      JsonSerializable(discriminatorField: "type", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isRequired: true), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null)
    ],
    constructor: ({String type = '', List<WidgetData> children = const [], required Cell cell}) => WidgetData(type: type, children: children, cell: cell),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetData(type: args['type'] as String? ?? '', children: args['children'] as List<WidgetData>? ?? const [], cell: args['cell'] as Cell?),
    fromArrayConstructor: (List<dynamic> args) => WidgetData(type: args[0] as String? ?? '', children: args[1] as List<WidgetData>? ?? const [], cell: args[2] as Cell?),
    fields: [
      field<WidgetData,String>('type',
        getter: (obj) => obj.type,
      ), 
      field<WidgetData,List<WidgetData>>('children',
        annotations: [
          DeclareProperty(group: "general", label: "editor:groups.general", hide: true),
          Json(required: false)
        ],
        elementType: WidgetData,
        factoryConstructor: () => <WidgetData>[],
        getter: (obj) => obj.children,
        setter: (obj, value) => (obj as WidgetData).children = value,
      ), 
      field<WidgetData,WidgetData>('parent',
        annotations: [
          Json(ignore: true)
        ],
        getter: (obj) => obj.parent,
        setter: (obj, value) => (obj as WidgetData).parent = value,
        isNullable: true
      ), 
      field<WidgetData,Cell>('cell',
        annotations: [
          DeclareProperty(group: "general", label: "editor:groups.general", hide: true)
        ],
        getter: (obj) => obj.cell,
        setter: (obj, value) => (obj as WidgetData).cell = value,
        isNullable: true
      ), 
      field<WidgetData,AbstractWidgetState<StatefulWidget>>('widget',
        annotations: [
          Json(ignore: true)
        ],
        getter: (obj) => obj.widget,
        setter: (obj, value) => (obj as WidgetData).widget = value,
        isNullable: true
      )
    ],
  );

  type<BooleanEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/bool_editor.dart:11:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => BooleanEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => BooleanEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => BooleanEditorBuilder(),
    methods: [
      method<BooleanEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as BooleanEditorBuilder).setup(args[1])
      )
    ],
  );

  type<CodeEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/code_editor.dart:15:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => CodeEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => CodeEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => CodeEditorBuilder(),
    methods: [
      method<CodeEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as CodeEditorBuilder).setup(args[1])
      )
    ],
  );

  type<ColorEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/color_editor.dart:11:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ColorEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ColorEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ColorEditorBuilder(),
    methods: [
      method<ColorEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ColorEditorBuilder).setup(args[1])
      )
    ],
  );

  type<FontEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/font_editor.dart:10:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => FontEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => FontEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => FontEditorBuilder(),
    methods: [
      method<FontEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as FontEditorBuilder).setup(args[1])
      )
    ],
  );

  type<FontStyleEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/font_style_editor.dart:9:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => FontStyleEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => FontStyleEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => FontStyleEditorBuilder(),
    methods: [
      method<FontStyleEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as FontStyleEditorBuilder).setup(args[1])
      )
    ],
  );

  type<FontWeightEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/font_weight_editor.dart:10:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => FontWeightEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => FontWeightEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => FontWeightEditorBuilder(),
    methods: [
      method<FontWeightEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as FontWeightEditorBuilder).setup(args[1])
      )
    ],
  );

  type<IntEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/int_editor.dart:10:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => IntEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => IntEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => IntEditorBuilder(),
    methods: [
      method<IntEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as IntEditorBuilder).setup(args[1])
      )
    ],
  );

  type<PaddingEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/paddding_editor.dart:13:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => PaddingEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => PaddingEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => PaddingEditorBuilder(),
    methods: [
      method<PaddingEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as PaddingEditorBuilder).setup(args[1])
      )
    ],
  );

  type<StringEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/string_editor.dart:9:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => StringEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => StringEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => StringEditorBuilder(),
    methods: [
      method<StringEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as StringEditorBuilder).setup(args[1])
      )
    ],
  );

  type<ValueEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/value_editor.dart:196:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ValueEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ValueEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ValueEditorBuilder(),
    methods: [
      method<ValueEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ValueEditorBuilder).setup(args[1])
      )
    ],
  );

  var abstractEnumBuilderDescriptor =  type<AbstractEnumBuilder>(
    location: 'package:velix_editor/property_panel/enum_editor.dart:11:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable(factory: false)
    ],
    constructor: () => AbstractEnumBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => AbstractEnumBuilder(),
    fromArrayConstructor: (List<dynamic> args) => AbstractEnumBuilder(),
    methods: [
      method<AbstractEnumBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as AbstractEnumBuilder).setup(args[1])
      )
    ],
  );

  type<ButtonWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/button_widget.dart:12:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ButtonWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ButtonWidgetBuilder(),
    methods: [
      method<ButtonWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ButtonWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<ButtonEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/button_widget.dart:72:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ButtonEditWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonEditWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ButtonEditWidgetBuilder(),
    methods: [
      method<ButtonEditWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ButtonEditWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<ColumnEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/column_widget.dart:15:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ColumnEditWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ColumnEditWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ColumnEditWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<ColumnEditWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ColumnEditWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<ColumnWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/column_widget.dart:92:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ColumnWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ColumnWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ColumnWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<ColumnWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ColumnWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<ContainerEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/container_widget.dart:16:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ContainerEditWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerEditWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ContainerEditWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<ContainerEditWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ContainerEditWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<ContainerWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/container_widget.dart:96:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ContainerWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ContainerWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<ContainerWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ContainerWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<GridEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/grid_widget.dart:15:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => GridEditWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => GridEditWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => GridEditWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<GridEditWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as GridEditWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<GridWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/grid_widget.dart:94:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => GridWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => GridWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => GridWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<GridWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as GridWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<LabelWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/label_widget.dart:14:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => LabelWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => LabelWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => LabelWidgetBuilder(),
    methods: [
      method<LabelWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as LabelWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<EditLabelWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/label_widget.dart:57:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => EditLabelWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => EditLabelWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => EditLabelWidgetBuilder(),
    methods: [
      method<EditLabelWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditLabelWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<RowEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/row_widget.dart:15:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => RowEditWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => RowEditWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => RowEditWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<RowEditWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as RowEditWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<RowWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/row_widget.dart:92:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => RowWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => RowWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => RowWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<RowWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as RowWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<StackEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/stack_widget.dart:15:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => StackEditWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => StackEditWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => StackEditWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<StackEditWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as StackEditWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<StackWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/stack_widget.dart:91:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => StackWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => StackWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => StackWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
    methods: [
      method<StackWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as StackWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<SwitchWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/switch_widget.dart:12:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => SwitchWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => SwitchWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => SwitchWidgetBuilder(),
    methods: [
      method<SwitchWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as SwitchWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<EditSwitchWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/switch_widget.dart:48:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => EditSwitchWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => EditSwitchWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => EditSwitchWidgetBuilder(),
    methods: [
      method<EditSwitchWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditSwitchWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<TextWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/text_widget.dart:11:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => TextWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => TextWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => TextWidgetBuilder(),
    methods: [
      method<TextWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as TextWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<TextEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/text_widget.dart:56:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => TextEditWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => TextEditWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => TextEditWidgetBuilder(),
    methods: [
      method<TextEditWidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as TextEditWidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<ExpressionPropertyValidator>(
    location: 'package:velix_editor/validate/validate.dart:68:1',
    superClass: propertyValidatorDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ExpressionPropertyValidator(),
    fromMapConstructor: (Map<String,dynamic> args) => ExpressionPropertyValidator(),
    fromArrayConstructor: (List<dynamic> args) => ExpressionPropertyValidator(),
    methods: [
      method<ExpressionPropertyValidator,void>('set',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetValidator>('validator', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ExpressionPropertyValidator).set(args[1])
      )
    ],
  );

  type<ValuePropertyValidator>(
    location: 'package:velix_editor/validate/validate.dart:108:1',
    superClass: propertyValidatorDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ValuePropertyValidator(),
    fromMapConstructor: (Map<String,dynamic> args) => ValuePropertyValidator(),
    fromArrayConstructor: (List<dynamic> args) => ValuePropertyValidator(),
    methods: [
      method<ValuePropertyValidator,void>('set',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetValidator>('validator', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as ValuePropertyValidator).set(args[1])
      )
    ],
  );

  type<ButtonWidgetData>(
    location: 'package:velix_editor/metadata/widgets/button.dart:11:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "button", group: "widgets", icon: "widget_button"),
      JsonSerializable(discriminator: "button", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "button"), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true), 
      param<Font>('font', isNamed: true, isNullable: true, defaultValue: null), 
      param<Color>('foregroundColor', isNamed: true, isNullable: true, defaultValue: null), 
      param<Color>('backgroundColor', isNamed: true, isNullable: true, defaultValue: null), 
      param<Insets>('padding', isNamed: true, isNullable: true, defaultValue: null), 
      param<String>('onClick', isNamed: true, isNullable: true, defaultValue: null)
    ],
    constructor: ({String type = "button", required Cell cell, List<WidgetData> children = const [], String label = '', required Font font, required Color foregroundColor, required Color backgroundColor, required Insets padding, String onClick = ''}) => ButtonWidgetData(type: type, cell: cell, children: children, label: label, font: font, foregroundColor: foregroundColor, backgroundColor: backgroundColor, padding: padding, onClick: onClick),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonWidgetData(type: args['type'] as String? ?? "button", cell: args['cell'] as Cell?, children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? '', font: args['font'] as Font?, foregroundColor: args['foregroundColor'] as Color?, backgroundColor: args['backgroundColor'] as Color?, padding: args['padding'] as Insets?, onClick: args['onClick'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => ButtonWidgetData(type: args[0] as String? ?? "button", cell: args[1] as Cell?, children: args[2] as List<WidgetData>? ?? const [], label: args[3] as String? ?? '', font: args[4] as Font?, foregroundColor: args[5] as Color?, backgroundColor: args[6] as Color?, padding: args[7] as Insets?, onClick: args[8] as String? ?? ''),
    fields: [
      field<ButtonWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as ButtonWidgetData).label = value,
      ), 
      field<ButtonWidgetData,Font>('font',
        annotations: [
          DeclareProperty(group: "font")
        ],
        getter: (obj) => obj.font,
        setter: (obj, value) => (obj as ButtonWidgetData).font = value,
        isNullable: true
      ), 
      field<ButtonWidgetData,Color>('foregroundColor',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.foregroundColor,
        setter: (obj, value) => (obj as ButtonWidgetData).foregroundColor = value,
        isNullable: true
      ), 
      field<ButtonWidgetData,Color>('backgroundColor',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.backgroundColor,
        setter: (obj, value) => (obj as ButtonWidgetData).backgroundColor = value,
        isNullable: true
      ), 
      field<ButtonWidgetData,Insets>('padding',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.padding,
        setter: (obj, value) => (obj as ButtonWidgetData).padding = value,
        isNullable: true
      ), 
      field<ButtonWidgetData,String>('onClick',
        type: StringType().optional(),
        annotations: [
          DeclareProperty(group: "events", editor: CodeEditorBuilder, validator: ExpressionPropertyValidator)
        ],
        getter: (obj) => obj.onClick,
        setter: (obj, value) => (obj as ButtonWidgetData).onClick = value,
        isNullable: true
      )
    ],
  );

  type<ColumnWidgetData>(
    location: 'package:velix_editor/metadata/widgets/column.dart:9:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "column", group: "container", icon: "widget_column"),
      JsonSerializable(discriminator: "column", includeNull: false)
    ],
    params: [
      param<MainAxisAlignment>('mainAxisAlignment', isNamed: true, isNullable: true, defaultValue: MainAxisAlignment.start), 
      param<CrossAxisAlignment>('crossAxisAlignment', isNamed: true, isNullable: true, defaultValue: CrossAxisAlignment.start), 
      param<MainAxisSize>('mainAxisSize', isNamed: true, isNullable: true, defaultValue: MainAxisSize.min), 
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "column"), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const [])
    ],
    constructor: ({MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.min, String type = "column", required Cell cell, List<WidgetData> children = const []}) => ColumnWidgetData(mainAxisAlignment: mainAxisAlignment, crossAxisAlignment: crossAxisAlignment, mainAxisSize: mainAxisSize, type: type, cell: cell, children: children),
    fromMapConstructor: (Map<String,dynamic> args) => ColumnWidgetData(mainAxisAlignment: args['mainAxisAlignment'] as MainAxisAlignment? ?? MainAxisAlignment.start, crossAxisAlignment: args['crossAxisAlignment'] as CrossAxisAlignment? ?? CrossAxisAlignment.start, mainAxisSize: args['mainAxisSize'] as MainAxisSize? ?? MainAxisSize.min, type: args['type'] as String? ?? "column", cell: args['cell'] as Cell?, children: args['children'] as List<WidgetData>? ?? const []),
    fromArrayConstructor: (List<dynamic> args) => ColumnWidgetData(mainAxisAlignment: args[0] as MainAxisAlignment? ?? MainAxisAlignment.start, crossAxisAlignment: args[1] as CrossAxisAlignment? ?? CrossAxisAlignment.start, mainAxisSize: args[2] as MainAxisSize? ?? MainAxisSize.min, type: args[3] as String? ?? "column", cell: args[4] as Cell?, children: args[5] as List<WidgetData>? ?? const []),
    fields: [
      field<ColumnWidgetData,MainAxisAlignment>('mainAxisAlignment',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.mainAxisAlignment,
        setter: (obj, value) => (obj as ColumnWidgetData).mainAxisAlignment = value,
        isNullable: true
      ), 
      field<ColumnWidgetData,CrossAxisAlignment>('crossAxisAlignment',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.crossAxisAlignment,
        setter: (obj, value) => (obj as ColumnWidgetData).crossAxisAlignment = value,
        isNullable: true
      ), 
      field<ColumnWidgetData,MainAxisSize>('mainAxisSize',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.mainAxisSize,
        setter: (obj, value) => (obj as ColumnWidgetData).mainAxisSize = value,
        isNullable: true
      )
    ],
  );

  type<ContainerWidgetData>(
    location: 'package:velix_editor/metadata/widgets/container.dart:11:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "container", group: "container", icon: "widget_container"),
      JsonSerializable(discriminator: "container", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "container"), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<Border>('border', isNamed: true, isNullable: true, defaultValue: null), 
      param<Insets>('margin', isNamed: true, isNullable: true, defaultValue: null), 
      param<Insets>('padding', isNamed: true, isNullable: true, defaultValue: null), 
      param<Color>('color', isNamed: true, isNullable: true, defaultValue: null), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const [])
    ],
    constructor: ({String type = "container", required Cell cell, required Border border, required Insets margin, required Insets padding, required Color color, List<WidgetData> children = const []}) => ContainerWidgetData(type: type, cell: cell, border: border, margin: margin, padding: padding, color: color, children: children),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerWidgetData(type: args['type'] as String? ?? "container", cell: args['cell'] as Cell?, border: args['border'] as Border?, margin: args['margin'] as Insets?, padding: args['padding'] as Insets?, color: args['color'] as Color?, children: args['children'] as List<WidgetData>? ?? const []),
    fromArrayConstructor: (List<dynamic> args) => ContainerWidgetData(type: args[0] as String? ?? "container", cell: args[1] as Cell?, border: args[2] as Border?, margin: args[3] as Insets?, padding: args[4] as Insets?, color: args[5] as Color?, children: args[6] as List<WidgetData>? ?? const []),
    fields: [
      field<ContainerWidgetData,Border>('border',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.border,
        setter: (obj, value) => (obj as ContainerWidgetData).border = value,
        isNullable: true
      ), 
      field<ContainerWidgetData,Color>('color',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.color,
        setter: (obj, value) => (obj as ContainerWidgetData).color = value,
        isNullable: true
      ), 
      field<ContainerWidgetData,Insets>('padding',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.padding,
        setter: (obj, value) => (obj as ContainerWidgetData).padding = value,
        isNullable: true
      ), 
      field<ContainerWidgetData,Insets>('margin',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.margin,
        setter: (obj, value) => (obj as ContainerWidgetData).margin = value,
        isNullable: true
      )
    ],
  );

  type<GridWidgetData>(
    location: 'package:velix_editor/metadata/widgets/grid.dart:8:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "grid", group: "container", icon: "widget_grid"),
      JsonSerializable(discriminator: "grid", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "grid"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<int>('rows', isNamed: true, isNullable: true, defaultValue: 1), 
      param<int>('cols', isNamed: true, isNullable: true, defaultValue: 1), 
      param<int>('spacing', isNamed: true, isNullable: true, defaultValue: 0)
    ],
    constructor: ({String type = "grid", List<WidgetData> children = const [], required Cell cell, int rows = 1, int cols = 1, int spacing = 0}) => GridWidgetData(type: type, children: children, cell: cell, rows: rows, cols: cols, spacing: spacing),
    fromMapConstructor: (Map<String,dynamic> args) => GridWidgetData(type: args['type'] as String? ?? "grid", children: args['children'] as List<WidgetData>? ?? const [], cell: args['cell'] as Cell?, rows: args['rows'] as int? ?? 1, cols: args['cols'] as int? ?? 1, spacing: args['spacing'] as int? ?? 0),
    fromArrayConstructor: (List<dynamic> args) => GridWidgetData(type: args[0] as String? ?? "grid", children: args[1] as List<WidgetData>? ?? const [], cell: args[2] as Cell?, rows: args[3] as int? ?? 1, cols: args[4] as int? ?? 1, spacing: args[5] as int? ?? 0),
    fields: [
      field<GridWidgetData,int>('rows',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.rows,
        setter: (obj, value) => (obj as GridWidgetData).rows = value,
      ), 
      field<GridWidgetData,int>('cols',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.cols,
        setter: (obj, value) => (obj as GridWidgetData).cols = value,
      ), 
      field<GridWidgetData,int>('spacing',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.spacing,
        setter: (obj, value) => (obj as GridWidgetData).spacing = value,
      )
    ],
  );

  type<LabelWidgetData>(
    location: 'package:velix_editor/metadata/widgets/label.dart:10:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "label", group: "widgets", icon: "widget_label"),
      JsonSerializable(discriminator: "label", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "label"), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<Value>('label', isNamed: true, isRequired: true), 
      param<Color>('color', isNamed: true, isNullable: true, defaultValue: null), 
      param<Color>('backgroundColor', isNamed: true, isNullable: true, defaultValue: null), 
      param<Font>('font', isNamed: true, isNullable: true, defaultValue: null)
    ],
    constructor: ({String type = "label", required Cell cell, List<WidgetData> children = const [], required Value label, required Color color, required Color backgroundColor, required Font font}) => LabelWidgetData(type: type, cell: cell, children: children, label: label, color: color, backgroundColor: backgroundColor, font: font),
    fromMapConstructor: (Map<String,dynamic> args) => LabelWidgetData(type: args['type'] as String? ?? "label", cell: args['cell'] as Cell?, children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as Value, color: args['color'] as Color?, backgroundColor: args['backgroundColor'] as Color?, font: args['font'] as Font?),
    fromArrayConstructor: (List<dynamic> args) => LabelWidgetData(type: args[0] as String? ?? "label", cell: args[1] as Cell?, children: args[2] as List<WidgetData>? ?? const [], label: args[3] as Value, color: args[4] as Color?, backgroundColor: args[5] as Color?, font: args[6] as Font?),
    fields: [
      field<LabelWidgetData,Value>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as LabelWidgetData).label = value,
      ), 
      field<LabelWidgetData,Font>('font',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.font,
        setter: (obj, value) => (obj as LabelWidgetData).font = value,
        isNullable: true
      ), 
      field<LabelWidgetData,Color>('color',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.color,
        setter: (obj, value) => (obj as LabelWidgetData).color = value,
        isNullable: true
      ), 
      field<LabelWidgetData,Color>('backgroundColor',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.backgroundColor,
        setter: (obj, value) => (obj as LabelWidgetData).backgroundColor = value,
        isNullable: true
      )
    ],
  );

  type<RowWidgetData>(
    location: 'package:velix_editor/metadata/widgets/row.dart:9:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "row", group: "container", icon: "widget_row"),
      JsonSerializable(discriminator: "row", includeNull: false)
    ],
    params: [
      param<MainAxisAlignment>('mainAxisAlignment', isNamed: true, isNullable: true, defaultValue: MainAxisAlignment.start), 
      param<CrossAxisAlignment>('crossAxisAlignment', isNamed: true, isNullable: true, defaultValue: CrossAxisAlignment.start), 
      param<MainAxisSize>('mainAxisSize', isNamed: true, isNullable: true, defaultValue: MainAxisSize.min), 
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "row"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null)
    ],
    constructor: ({MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.min, String type = "row", List<WidgetData> children = const [], required Cell cell}) => RowWidgetData(mainAxisAlignment: mainAxisAlignment, crossAxisAlignment: crossAxisAlignment, mainAxisSize: mainAxisSize, type: type, children: children, cell: cell),
    fromMapConstructor: (Map<String,dynamic> args) => RowWidgetData(mainAxisAlignment: args['mainAxisAlignment'] as MainAxisAlignment? ?? MainAxisAlignment.start, crossAxisAlignment: args['crossAxisAlignment'] as CrossAxisAlignment? ?? CrossAxisAlignment.start, mainAxisSize: args['mainAxisSize'] as MainAxisSize? ?? MainAxisSize.min, type: args['type'] as String? ?? "row", children: args['children'] as List<WidgetData>? ?? const [], cell: args['cell'] as Cell?),
    fromArrayConstructor: (List<dynamic> args) => RowWidgetData(mainAxisAlignment: args[0] as MainAxisAlignment? ?? MainAxisAlignment.start, crossAxisAlignment: args[1] as CrossAxisAlignment? ?? CrossAxisAlignment.start, mainAxisSize: args[2] as MainAxisSize? ?? MainAxisSize.min, type: args[3] as String? ?? "row", children: args[4] as List<WidgetData>? ?? const [], cell: args[5] as Cell?),
    fields: [
      field<RowWidgetData,MainAxisAlignment>('mainAxisAlignment',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.mainAxisAlignment,
        setter: (obj, value) => (obj as RowWidgetData).mainAxisAlignment = value,
        isNullable: true
      ), 
      field<RowWidgetData,CrossAxisAlignment>('crossAxisAlignment',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.crossAxisAlignment,
        setter: (obj, value) => (obj as RowWidgetData).crossAxisAlignment = value,
        isNullable: true
      ), 
      field<RowWidgetData,MainAxisSize>('mainAxisSize',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.mainAxisSize,
        setter: (obj, value) => (obj as RowWidgetData).mainAxisSize = value,
        isNullable: true
      )
    ],
  );

  type<StackWidgetData>(
    location: 'package:velix_editor/metadata/widgets/stack.dart:8:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "stack", group: "container", icon: "widget_stack"),
      JsonSerializable(discriminator: "stack", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "stack"), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const [])
    ],
    constructor: ({String type = "stack", required Cell cell, List<WidgetData> children = const []}) => StackWidgetData(type: type, cell: cell, children: children),
    fromMapConstructor: (Map<String,dynamic> args) => StackWidgetData(type: args['type'] as String? ?? "stack", cell: args['cell'] as Cell?, children: args['children'] as List<WidgetData>? ?? const []),
    fromArrayConstructor: (List<dynamic> args) => StackWidgetData(type: args[0] as String? ?? "stack", cell: args[1] as Cell?, children: args[2] as List<WidgetData>? ?? const []),
  );

  type<SwitchWidgetData>(
    location: 'package:velix_editor/metadata/widgets/switch.dart:9:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "switch", group: "widgets", icon: "widget_switch"),
      JsonSerializable(discriminator: "switch", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "switch"), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true), 
      param<Insets>('padding', isNamed: true, isNullable: true, defaultValue: null), 
      param<String>('databinding', isNamed: true, isNullable: true, defaultValue: null)
    ],
    constructor: ({String type = "switch", required Cell cell, List<WidgetData> children = const [], String label = '', required Insets padding, String databinding = ''}) => SwitchWidgetData(type: type, cell: cell, children: children, label: label, padding: padding, databinding: databinding),
    fromMapConstructor: (Map<String,dynamic> args) => SwitchWidgetData(type: args['type'] as String? ?? "switch", cell: args['cell'] as Cell?, children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? '', padding: args['padding'] as Insets?, databinding: args['databinding'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => SwitchWidgetData(type: args[0] as String? ?? "switch", cell: args[1] as Cell?, children: args[2] as List<WidgetData>? ?? const [], label: args[3] as String? ?? '', padding: args[4] as Insets?, databinding: args[5] as String? ?? ''),
    fields: [
      field<SwitchWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as SwitchWidgetData).label = value,
      ), 
      field<SwitchWidgetData,Insets>('padding',
        annotations: [
          DeclareProperty(group: "style")
        ],
        getter: (obj) => obj.padding,
        setter: (obj, value) => (obj as SwitchWidgetData).padding = value,
        isNullable: true
      ), 
      field<SwitchWidgetData,String>('databinding',
        type: StringType().optional(),
        annotations: [
          DeclareProperty(group: "databinding", editor: CodeEditorBuilder)
        ],
        getter: (obj) => obj.databinding,
        setter: (obj, value) => (obj as SwitchWidgetData).databinding = value,
        isNullable: true
      )
    ],
  );

  type<TextWidgetData>(
    location: 'package:velix_editor/metadata/widgets/text.dart:8:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "text", group: "widgets", icon: "widget_text"),
      JsonSerializable(discriminator: "text", includeNull: false)
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "text"), 
      param<Cell>('cell', isNamed: true, isNullable: true, defaultValue: null), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true), 
      param<String>('databinding', isNamed: true, isRequired: true)
    ],
    constructor: ({String type = "text", required Cell cell, List<WidgetData> children = const [], String label = '', String databinding = ''}) => TextWidgetData(type: type, cell: cell, children: children, label: label, databinding: databinding),
    fromMapConstructor: (Map<String,dynamic> args) => TextWidgetData(type: args['type'] as String? ?? "text", cell: args['cell'] as Cell?, children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? '', databinding: args['databinding'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => TextWidgetData(type: args[0] as String? ?? "text", cell: args[1] as Cell?, children: args[2] as List<WidgetData>? ?? const [], label: args[3] as String? ?? '', databinding: args[4] as String? ?? ''),
    fields: [
      field<TextWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as TextWidgetData).label = value,
      ), 
      field<TextWidgetData,String>('databinding',
        type: StringType().optional(),
        annotations: [
          DeclareProperty(group: "general", editor: CodeEditorBuilder, validator: ExpressionPropertyValidator)
        ],
        getter: (obj) => obj.databinding,
        setter: (obj, value) => (obj as TextWidgetData).databinding = value,
        isNullable: true
      )
    ],
  );

  type<CrossAxisAlignmentBuilder>(
    location: 'package:velix_editor/property_panel/editor/alignment_editor.dart:6:1',
    superClass: abstractEnumBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => CrossAxisAlignmentBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => CrossAxisAlignmentBuilder(),
    fromArrayConstructor: (List<dynamic> args) => CrossAxisAlignmentBuilder(),
    methods: [
      method<CrossAxisAlignmentBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as CrossAxisAlignmentBuilder).setup(args[1])
      )
    ],
  );

  type<MainAxisAlignmentBuilder>(
    location: 'package:velix_editor/property_panel/editor/alignment_editor.dart:11:1',
    superClass: abstractEnumBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => MainAxisAlignmentBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => MainAxisAlignmentBuilder(),
    fromArrayConstructor: (List<dynamic> args) => MainAxisAlignmentBuilder(),
    methods: [
      method<MainAxisAlignmentBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as MainAxisAlignmentBuilder).setup(args[1])
      )
    ],
  );

  type<MainAxisSizeBuilder>(
    location: 'package:velix_editor/property_panel/editor/alignment_editor.dart:16:1',
    superClass: abstractEnumBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => MainAxisSizeBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => MainAxisSizeBuilder(),
    fromArrayConstructor: (List<dynamic> args) => MainAxisSizeBuilder(),
    methods: [
      method<MainAxisSizeBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as MainAxisSizeBuilder).setup(args[1])
      )
    ],
  );

  type<BorderStyleBuilder>(
    location: 'package:velix_editor/property_panel/editor/alignment_editor.dart:20:1',
    superClass: abstractEnumBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => BorderStyleBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => BorderStyleBuilder(),
    fromArrayConstructor: (List<dynamic> args) => BorderStyleBuilder(),
    methods: [
      method<BorderStyleBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as BorderStyleBuilder).setup(args[1])
      )
    ],
  );

  TypeDescriptor.verify();
}
