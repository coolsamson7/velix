// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by velix registry builder
// ignore_for_file: unnecessary_import, unused_local_variable

import 'package:flutter/material.dart' hide WidgetBuilder;
import 'package:velix/velix.dart';
import 'package:velix/reflectable/reflectable.dart';
import 'package:velix_di/di/di.dart';
import 'package:velix_editor/commands/command_stack.dart';
import 'package:velix_editor/editor_module.dart';
import 'package:velix_editor/metadata/annotations.dart';
import 'package:velix_editor/metadata/type_registry.dart';
import 'package:velix_editor/metadata/widget_data.dart';
import 'package:velix_editor/metadata/widgets/button.dart';
import 'package:velix_editor/metadata/widgets/container.dart';
import 'package:velix_editor/metadata/widgets/text.dart';
import 'package:velix_editor/property_panel/editor/bool_editor.dart';
import 'package:velix_editor/property_panel/editor/int_editor.dart';
import 'package:velix_editor/property_panel/editor/string_editor.dart';
import 'package:velix_editor/property_panel/editor_builder.dart';
import 'package:velix_editor/property_panel/editor_registry.dart';
import 'package:velix_editor/theme/theme.dart';
import 'package:velix_editor/theme/widget_builder.dart';
import 'package:velix_editor/theme/widgets/button_widget.dart';
import 'package:velix_editor/theme/widgets/container_widget.dart';
import 'package:velix_editor/theme/widgets/text_widget.dart';
import 'package:velix_editor/util/message_bus.dart';
import 'package:velix_mapper/mapper/json.dart';

void registerEditorTypes() {
  type<CommandStack>(
    location: 'package:velix_editor/commands/command_stack.dart:10:1',
    annotations: [
      Injectable(scope: "environment", eager: false)
    ],
    constructor: () => CommandStack(),
    fromMapConstructor: (Map<String,dynamic> args) => CommandStack(),
    fromArrayConstructor: (List<dynamic> args) => CommandStack(),
  );

  type<EditorModule>(
    location: 'package:velix_editor/editor_module.dart:5:1',
    annotations: [
      Module(imports: [])
    ],
    constructor: () => EditorModule(),
    fromMapConstructor: (Map<String,dynamic> args) => EditorModule(),
    fromArrayConstructor: (List<dynamic> args) => EditorModule(),
    methods: [
      method<EditorModule,void>('onInit',
        annotations: [
          OnInit()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorModule).onInit()
      ), 
      method<EditorModule,void>('onDestroy',
        annotations: [
          OnDestroy()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorModule).onDestroy()
      )
    ],
  );

  type<TypeRegistry>(
    location: 'package:velix_editor/metadata/type_registry.dart:9:1',
    annotations: [
      Injectable()
    ],
    constructor: () => TypeRegistry(),
    fromMapConstructor: (Map<String,dynamic> args) => TypeRegistry(),
    fromArrayConstructor: (List<dynamic> args) => TypeRegistry(),
    methods: [
      method<TypeRegistry,void>('setup',
        annotations: [
          OnInit()
        ],
        invoker: (List<dynamic> args)=> (args[0] as TypeRegistry).setup()
      )
    ],
  );

  var widgetDataDescriptor =  type<WidgetData>(
    location: 'package:velix_editor/metadata/widget_data.dart:6:1',
    annotations: [
      JsonSerializable(discriminatorField: "type")
    ],
    params: [
      param<String>('type', isNamed: true, isRequired: true), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const [])
    ],
    constructor: ({String type = '', List<WidgetData> children = const []}) => WidgetData(type: type, children: children),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetData(type: args['type'] as String? ?? '', children: args['children'] as List<WidgetData>? ?? const []),
    fromArrayConstructor: (List<dynamic> args) => WidgetData(type: args[0] as String? ?? '', children: args[1] as List<WidgetData>? ?? const []),
    fields: [
      field<WidgetData,String>('type',
        getter: (obj) => obj.type,
      ), 
      field<WidgetData,List<WidgetData>>('children',
        annotations: [
          DeclareProperty(group: "general", hide: true),
          Json(required: false)
        ],
        elementType: WidgetData,
        factoryConstructor: () => <WidgetData>[],
        getter: (obj) => obj.children,
        setter: (obj, value) => (obj as WidgetData).children = value,
      ), 
      field<WidgetData,WidgetData>('parent',
        annotations: [
          Json(ignore: true)
        ],
        getter: (obj) => obj.parent,
        setter: (obj, value) => (obj as WidgetData).parent = value,
        isNullable: true
      )
    ]
  );

  var propertyEditorBuilderDescriptor =  type<PropertyEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor_builder.dart:6:1',
    annotations: [
      Injectable()
    ],
    isAbstract: true,
    methods: [
      method<PropertyEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorRegistry>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as PropertyEditorBuilder).setup(args[1])
      )
    ],
  );

  type<PropertyEditorRegistry>(
    location: 'package:velix_editor/property_panel/editor_registry.dart:6:1',
    annotations: [
      Injectable()
    ],
    constructor: () => PropertyEditorRegistry(),
    fromMapConstructor: (Map<String,dynamic> args) => PropertyEditorRegistry(),
    fromArrayConstructor: (List<dynamic> args) => PropertyEditorRegistry(),
  );

  type<WidgetFactory>(
    location: 'package:velix_editor/theme/theme.dart:7:1',
    annotations: [
      Injectable()
    ],
    constructor: () => WidgetFactory(),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetFactory(),
    fromArrayConstructor: (List<dynamic> args) => WidgetFactory(),
  );

  var widgetBuilderDescriptor =  type<WidgetBuilder>(
    location: 'package:velix_editor/theme/widget_builder.dart:8:1',
    annotations: [
      Injectable(factory: false, eager: false)
    ],
    isAbstract: true,
    methods: [
      method<WidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as WidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<MessageBus>(
    location: 'package:velix_editor/util/message_bus.dart:7:1',
    annotations: [
      Injectable(scope: "environment", eager: false)
    ],
    constructor: () => MessageBus(),
    fromMapConstructor: (Map<String,dynamic> args) => MessageBus(),
    fromArrayConstructor: (List<dynamic> args) => MessageBus(),
  );

  type<ButtonWidgetData>(
    location: 'package:velix_editor/metadata/widgets/button.dart:8:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "button", group: "Widgets", icon: Icons.text_fields),
      JsonSerializable(discriminator: "button")
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "button"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true), 
      param<int>('number', isNamed: true, isRequired: true), 
      param<bool>('isCool', isNamed: true, isRequired: true)
    ],
    constructor: ({String type = "button", List<WidgetData> children = const [], String label = '', int number = 0, bool isCool = false}) => ButtonWidgetData(type: type, children: children, label: label, number: number, isCool: isCool),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonWidgetData(type: args['type'] as String? ?? "button", children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? '', number: args['number'] as int? ?? 0, isCool: args['isCool'] as bool? ?? false),
    fromArrayConstructor: (List<dynamic> args) => ButtonWidgetData(type: args[0] as String? ?? "button", children: args[1] as List<WidgetData>? ?? const [], label: args[2] as String? ?? '', number: args[3] as int? ?? 0, isCool: args[4] as bool? ?? false),
    fields: [
      field<ButtonWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as ButtonWidgetData).label = value,
      ), 
      field<ButtonWidgetData,int>('number',
        annotations: [
          DeclareProperty(group: "Group1")
        ],
        getter: (obj) => obj.number,
        setter: (obj, value) => (obj as ButtonWidgetData).number = value,
      ), 
      field<ButtonWidgetData,bool>('isCool',
        annotations: [
          DeclareProperty(group: "Group2")
        ],
        getter: (obj) => obj.isCool,
        setter: (obj, value) => (obj as ButtonWidgetData).isCool = value,
      )
    ]
  );

  type<ContainerWidgetData>(
    location: 'package:velix_editor/metadata/widgets/container.dart:9:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "container", group: "Container", icon: Icons.view_column),
      JsonSerializable(discriminator: "container")
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "container"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const [])
    ],
    constructor: ({String type = "container", List<WidgetData> children = const []}) => ContainerWidgetData(type: type, children: children),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerWidgetData(type: args['type'] as String? ?? "container", children: args['children'] as List<WidgetData>? ?? const []),
    fromArrayConstructor: (List<dynamic> args) => ContainerWidgetData(type: args[0] as String? ?? "container", children: args[1] as List<WidgetData>? ?? const []),
  );

  type<TextWidgetData>(
    location: 'package:velix_editor/metadata/widgets/text.dart:8:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "text", group: "Widgets", icon: Icons.text_fields),
      JsonSerializable(discriminator: "text")
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "text"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true)
    ],
    constructor: ({String type = "text", List<WidgetData> children = const [], String label = ''}) => TextWidgetData(type: type, children: children, label: label),
    fromMapConstructor: (Map<String,dynamic> args) => TextWidgetData(type: args['type'] as String? ?? "text", children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => TextWidgetData(type: args[0] as String? ?? "text", children: args[1] as List<WidgetData>? ?? const [], label: args[2] as String? ?? ''),
    fields: [
      field<TextWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as TextWidgetData).label = value,
      )
    ]
  );

  type<BooleanEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/bool_editor.dart:6:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => BooleanEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => BooleanEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => BooleanEditorBuilder(),
  );

  type<IntEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/int_editor.dart:7:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => IntEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => IntEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => IntEditorBuilder(),
  );

  type<StringEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/string_editor.dart:6:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => StringEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => StringEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => StringEditorBuilder(),
  );

  type<ButtonWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/button_widget.dart:7:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ButtonWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ButtonWidgetBuilder(),
  );

  type<ButtonEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/button_widget.dart:20:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ButtonEditWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonEditWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ButtonEditWidgetBuilder(),
  );

  type<ContainerEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/container_widget.dart:15:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ContainerEditWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerEditWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ContainerEditWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
  );

  type<ContainerWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/container_widget.dart:91:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ContainerWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ContainerWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
  );

  type<TextWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/text_widget.dart:7:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => TextWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => TextWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => TextWidgetBuilder(),
  );

  type<TextEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/text_widget.dart:17:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => TextEditWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => TextEditWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => TextEditWidgetBuilder(),
  );

}
