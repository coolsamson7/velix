// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by velix registry builder
// ignore_for_file: unnecessary_import, unused_local_variable

import 'dart:ui';

import 'package:flutter/material.dart' show Icons;
import 'package:velix/velix.dart';
import 'package:velix/reflectable/reflectable.dart';
import 'package:velix_di/di/di.dart';
import 'package:velix_editor/commands/command_stack.dart';
import 'package:velix_editor/editor/editor.dart';
import 'package:velix_editor/editor_module.dart';
import 'package:velix_editor/metadata/annotations.dart';
import 'package:velix_editor/metadata/properties/properties.dart';
import 'package:velix_editor/metadata/type_registry.dart';
import 'package:velix_editor/metadata/widget_data.dart';
import 'package:velix_editor/metadata/widgets/button.dart';
import 'package:velix_editor/metadata/widgets/container.dart';
import 'package:velix_editor/metadata/widgets/label.dart';
import 'package:velix_editor/metadata/widgets/text.dart';
import 'package:velix_editor/property_panel/editor/bool_editor.dart';
import 'package:velix_editor/property_panel/editor/code_editor.dart';
import 'package:velix_editor/property_panel/editor/font_style_editor.dart';
import 'package:velix_editor/property_panel/editor/font_weight_editor.dart';
import 'package:velix_editor/property_panel/editor/int_editor.dart';
import 'package:velix_editor/property_panel/editor/paddding_editor.dart';
import 'package:velix_editor/property_panel/editor/string_editor.dart';
import 'package:velix_editor/property_panel/editor_builder.dart';
import 'package:velix_editor/property_panel/editor_registry.dart';
import 'package:velix_editor/theme/theme.dart';
import 'package:velix_editor/theme/widget_builder.dart';
import 'package:velix_editor/theme/widgets/button_widget.dart';
import 'package:velix_editor/theme/widgets/container_widget.dart';
import 'package:velix_editor/theme/widgets/label_widget.dart';
import 'package:velix_editor/theme/widgets/text_widget.dart';
import 'package:velix_editor/util/message_bus.dart';
import 'package:velix_mapper/mapper/json.dart';

void registerEditorTypes() {
  type<CommandStack>(
    location: 'package:velix_editor/commands/command_stack.dart:11:1',
    annotations: [
      Injectable(scope: "environment", eager: false)
    ],
    constructor: () => CommandStack(),
    fromMapConstructor: (Map<String,dynamic> args) => CommandStack(),
    fromArrayConstructor: (List<dynamic> args) => CommandStack(),
  );

  type<Address>(
    location: 'package:velix_editor/editor/editor.dart:207:1',
    params: [
      param<String>('city', isNamed: true, isRequired: true), 
      param<String>('street', isNamed: true, isRequired: true)
    ],
    constructor: ({String city = '', String street = ''}) => Address(city: city, street: street),
    fromMapConstructor: (Map<String,dynamic> args) => Address(city: args['city'] as String? ?? '', street: args['street'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => Address(city: args[0] as String? ?? '', street: args[1] as String? ?? ''),
    fields: [
      field<Address,String>('city',
        getter: (obj) => obj.city,
        setter: (obj, value) => (obj as Address).city = value,
      ), 
      field<Address,String>('street',
        getter: (obj) => obj.street,
        setter: (obj, value) => (obj as Address).street = value,
      )
    ],
    methods: [
      method<Address,String>('hello',
        annotations: [
          Inject()
        ],
        parameters: [
          param<String>('message', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as Address).hello(args[1])
      )
    ],
  );

  type<Page>(
    location: 'package:velix_editor/editor/editor.dart:249:1',
    annotations: [
      Injectable()
    ],
    constructor: () => Page(),
    fromMapConstructor: (Map<String,dynamic> args) => Page(),
    fromArrayConstructor: (List<dynamic> args) => Page(),
    fields: [
      field<Page,User>('user',
        getter: (obj) => obj.user,
        setter: (obj, value) => (obj as Page).user = value,
      )
    ],
    methods: [
      method<Page,void>('setup',
        annotations: [
          Inject()
        ],
        invoker: (List<dynamic> args)=> (args[0] as Page).setup()
      )
    ],
  );

  type<EditorModule>(
    location: 'package:velix_editor/editor_module.dart:5:1',
    annotations: [
      Module(imports: [])
    ],
    constructor: () => EditorModule(),
    fromMapConstructor: (Map<String,dynamic> args) => EditorModule(),
    fromArrayConstructor: (List<dynamic> args) => EditorModule(),
    methods: [
      method<EditorModule,void>('onInit',
        annotations: [
          OnInit()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorModule).onInit()
      ), 
      method<EditorModule,void>('onDestroy',
        annotations: [
          OnDestroy()
        ],
        invoker: (List<dynamic> args)=> (args[0] as EditorModule).onDestroy()
      )
    ],
  );

  type<FontWeightConvert>(
    location: 'package:velix_editor/metadata/properties/properties.dart:8:1',
    constructor: () => FontWeightConvert(),
    fromMapConstructor: (Map<String,dynamic> args) => FontWeightConvert(),
    fromArrayConstructor: (List<dynamic> args) => FontWeightConvert(),
  );

  type<FontStyleConvert>(
    location: 'package:velix_editor/metadata/properties/properties.dart:22:1',
    constructor: () => FontStyleConvert(),
    fromMapConstructor: (Map<String,dynamic> args) => FontStyleConvert(),
    fromArrayConstructor: (List<dynamic> args) => FontStyleConvert(),
  );

  type<Padding>(
    location: 'package:velix_editor/metadata/properties/properties.dart:35:1',
    params: [
      param<int>('left', isNamed: true, isNullable: true, defaultValue: 0), 
      param<int>('top', isNamed: true, isNullable: true, defaultValue: 0), 
      param<int>('right', isNamed: true, isNullable: true, defaultValue: 0), 
      param<int>('bottom', isNamed: true, isNullable: true, defaultValue: 0)
    ],
    constructor: ({int left = 0, int top = 0, int right = 0, int bottom = 0}) => Padding(left: left, top: top, right: right, bottom: bottom),
    fromMapConstructor: (Map<String,dynamic> args) => Padding(left: args['left'] as int? ?? 0, top: args['top'] as int? ?? 0, right: args['right'] as int? ?? 0, bottom: args['bottom'] as int? ?? 0),
    fromArrayConstructor: (List<dynamic> args) => Padding(left: args[0] as int? ?? 0, top: args[1] as int? ?? 0, right: args[2] as int? ?? 0, bottom: args[3] as int? ?? 0),
    fields: [
      field<Padding,int>('left',
        annotations: [
          DeclareProperty(label: "editor:properties.padding.left")
        ],
        getter: (obj) => obj.left,
        setter: (obj, value) => (obj as Padding).left = value,
      ), 
      field<Padding,int>('top',
        annotations: [
          DeclareProperty(label: "editor:properties.padding.top")
        ],
        getter: (obj) => obj.top,
        setter: (obj, value) => (obj as Padding).top = value,
      ), 
      field<Padding,int>('right',
        annotations: [
          DeclareProperty(label: "editor:properties.padding.right")
        ],
        getter: (obj) => obj.right,
        setter: (obj, value) => (obj as Padding).right = value,
      ), 
      field<Padding,int>('bottom',
        annotations: [
          DeclareProperty(label: "editor:properties.padding.bottom")
        ],
        getter: (obj) => obj.bottom,
        setter: (obj, value) => (obj as Padding).bottom = value,
      )
    ],
  );

  type<Font>(
    location: 'package:velix_editor/metadata/properties/properties.dart:54:1',
    params: [
      param<FontWeight>('weight', isNamed: true, isNullable: true, defaultValue: FontWeight.normal), 
      param<FontStyle>('style', isNamed: true, isNullable: true, defaultValue: FontStyle.normal), 
      param<int>('size', isNamed: true, isNullable: true, defaultValue: 16)
    ],
    constructor: ({FontWeight weight = FontWeight.normal, FontStyle style = FontStyle.normal, int size = 16}) => Font(weight: weight, style: style, size: size),
    fromMapConstructor: (Map<String,dynamic> args) => Font(weight: args['weight'] as FontWeight? ?? FontWeight.normal, style: args['style'] as FontStyle? ?? FontStyle.normal, size: args['size'] as int? ?? 16),
    fromArrayConstructor: (List<dynamic> args) => Font(weight: args[0] as FontWeight? ?? FontWeight.normal, style: args[1] as FontStyle? ?? FontStyle.normal, size: args[2] as int? ?? 16),
    fields: [
      field<Font,FontWeight>('weight',
        annotations: [
          DeclareProperty(label: "editor:properties.font.weight")
        ],
        getter: (obj) => obj.weight,
        setter: (obj, value) => (obj as Font).weight = value,
      ), 
      field<Font,FontStyle>('style',
        annotations: [
          DeclareProperty(label: "editor:properties.font.style")
        ],
        getter: (obj) => obj.style,
        setter: (obj, value) => (obj as Font).style = value,
      ), 
      field<Font,int>('size',
        annotations: [
          DeclareProperty(label: "editor:properties.font.size")
        ],
        getter: (obj) => obj.size,
        setter: (obj, value) => (obj as Font).size = value,
      )
    ],
  );

  type<TypeRegistry>(
    location: 'package:velix_editor/metadata/type_registry.dart:11:1',
    annotations: [
      Injectable()
    ],
    constructor: () => TypeRegistry(),
    fromMapConstructor: (Map<String,dynamic> args) => TypeRegistry(),
    fromArrayConstructor: (List<dynamic> args) => TypeRegistry(),
    methods: [
      method<TypeRegistry,void>('setup',
        annotations: [
          OnInit()
        ],
        invoker: (List<dynamic> args)=> (args[0] as TypeRegistry).setup()
      )
    ],
  );

  var widgetDataDescriptor =  type<WidgetData>(
    location: 'package:velix_editor/metadata/widget_data.dart:6:1',
    annotations: [
      JsonSerializable(discriminatorField: "type")
    ],
    params: [
      param<String>('type', isNamed: true, isRequired: true), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const [])
    ],
    constructor: ({String type = '', List<WidgetData> children = const []}) => WidgetData(type: type, children: children),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetData(type: args['type'] as String? ?? '', children: args['children'] as List<WidgetData>? ?? const []),
    fromArrayConstructor: (List<dynamic> args) => WidgetData(type: args[0] as String? ?? '', children: args[1] as List<WidgetData>? ?? const []),
    fields: [
      field<WidgetData,String>('type',
        getter: (obj) => obj.type,
      ), 
      field<WidgetData,List<WidgetData>>('children',
        annotations: [
          DeclareProperty(group: "general", label: "editor:groups.general", hide: true),
          Json(required: false)
        ],
        elementType: WidgetData,
        factoryConstructor: () => <WidgetData>[],
        getter: (obj) => obj.children,
        setter: (obj, value) => (obj as WidgetData).children = value,
      ), 
      field<WidgetData,WidgetData>('parent',
        annotations: [
          Json(ignore: true)
        ],
        getter: (obj) => obj.parent,
        setter: (obj, value) => (obj as WidgetData).parent = value,
        isNullable: true
      )
    ],
  );

  var propertyEditorBuilderDescriptor =  type<PropertyEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor_builder.dart:9:1',
    annotations: [
      Injectable()
    ],
    isAbstract: true,
    methods: [
      method<PropertyEditorBuilder,void>('setup',
        annotations: [
          Inject()
        ],
        parameters: [
          param<PropertyEditorBuilderFactory>('registry', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as PropertyEditorBuilder).setup(args[1])
      )
    ],
  );

  type<PropertyEditorBuilderFactory>(
    location: 'package:velix_editor/property_panel/editor_registry.dart:6:1',
    annotations: [
      Injectable()
    ],
    constructor: () => PropertyEditorBuilderFactory(),
    fromMapConstructor: (Map<String,dynamic> args) => PropertyEditorBuilderFactory(),
    fromArrayConstructor: (List<dynamic> args) => PropertyEditorBuilderFactory(),
  );

  type<WidgetFactory>(
    location: 'package:velix_editor/theme/theme.dart:7:1',
    annotations: [
      Injectable()
    ],
    constructor: () => WidgetFactory(),
    fromMapConstructor: (Map<String,dynamic> args) => WidgetFactory(),
    fromArrayConstructor: (List<dynamic> args) => WidgetFactory(),
  );

  var widgetBuilderDescriptor =  type<WidgetBuilder>(
    location: 'package:velix_editor/theme/widget_builder.dart:9:1',
    annotations: [
      Injectable(factory: false, eager: false)
    ],
    isAbstract: true,
    methods: [
      method<WidgetBuilder,void>('setThema',
        annotations: [
          Inject()
        ],
        parameters: [
          param<WidgetFactory>('theme', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as WidgetBuilder).setThema(args[1])
      )
    ],
  );

  type<MessageBus>(
    location: 'package:velix_editor/util/message_bus.dart:7:1',
    annotations: [
      Injectable(scope: "environment", eager: false)
    ],
    constructor: () => MessageBus(),
    fromMapConstructor: (Map<String,dynamic> args) => MessageBus(),
    fromArrayConstructor: (List<dynamic> args) => MessageBus(),
  );

  type<User>(
    location: 'package:velix_editor/editor/editor.dart:228:1',
    params: [
      param<String>('name', isNamed: true, isRequired: true), 
      param<Address>('address', isNamed: true, isRequired: true)
    ],
    constructor: ({String name = '', required Address address}) => User(name: name, address: address),
    fromMapConstructor: (Map<String,dynamic> args) => User(name: args['name'] as String? ?? '', address: args['address'] as Address),
    fromArrayConstructor: (List<dynamic> args) => User(name: args[0] as String? ?? '', address: args[1] as Address),
    fields: [
      field<User,String>('name',
        getter: (obj) => obj.name,
        setter: (obj, value) => (obj as User).name = value,
      ), 
      field<User,Address>('address',
        getter: (obj) => obj.address,
        setter: (obj, value) => (obj as User).address = value,
      )
    ],
    methods: [
      method<User,String>('hello',
        annotations: [
          Inject()
        ],
        parameters: [
          param<String>('message', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as User).hello(args[1])
      )
    ],
  );

  type<ButtonWidgetData>(
    location: 'package:velix_editor/metadata/widgets/button.dart:10:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "button", group: "widgets", icon: Icons.text_fields),
      JsonSerializable(discriminator: "button")
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "button"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true), 
      param<Font>('font', isNamed: true, isNullable: true, defaultValue: null), 
      param<Padding>('padding', isNamed: true, isNullable: true, defaultValue: null), 
      param<String>('onClick', isNamed: true, isNullable: true, defaultValue: null)
    ],
    constructor: ({String type = "button", List<WidgetData> children = const [], String label = '', required Font font, required Padding padding, String onClick = ''}) => ButtonWidgetData(type: type, children: children, label: label, font: font, padding: padding, onClick: onClick),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonWidgetData(type: args['type'] as String? ?? "button", children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? '', font: args['font'] as Font?, padding: args['padding'] as Padding?, onClick: args['onClick'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => ButtonWidgetData(type: args[0] as String? ?? "button", children: args[1] as List<WidgetData>? ?? const [], label: args[2] as String? ?? '', font: args[3] as Font, padding: args[4] as Padding, onClick: args[5] as String? ?? ''),
    fields: [
      field<ButtonWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as ButtonWidgetData).label = value,
      ), 
      field<ButtonWidgetData,Font>('font',
        annotations: [
          DeclareProperty(group: "font")
        ],
        getter: (obj) => obj.font,
        setter: (obj, value) => (obj as ButtonWidgetData).font = value,
        isNullable: true
      ), 
      field<ButtonWidgetData,Padding>('padding',
        annotations: [
          DeclareProperty(group: "layout")
        ],
        getter: (obj) => obj.padding,
        setter: (obj, value) => (obj as ButtonWidgetData).padding = value,
        isNullable: true
      ), 
      field<ButtonWidgetData,String>('onClick',
        type: StringType().optional(),
        annotations: [
          DeclareProperty(group: "events", editor: CodeEditorBuilder)
        ],
        getter: (obj) => obj.onClick,
        setter: (obj, value) => (obj as ButtonWidgetData).onClick = value,
        isNullable: true
      )
    ],
  );

  type<ContainerWidgetData>(
    location: 'package:velix_editor/metadata/widgets/container.dart:9:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "container", group: "container", icon: Icons.view_column),
      JsonSerializable(discriminator: "container")
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "container"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const [])
    ],
    constructor: ({String type = "container", List<WidgetData> children = const []}) => ContainerWidgetData(type: type, children: children),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerWidgetData(type: args['type'] as String? ?? "container", children: args['children'] as List<WidgetData>? ?? const []),
    fromArrayConstructor: (List<dynamic> args) => ContainerWidgetData(type: args[0] as String? ?? "container", children: args[1] as List<WidgetData>? ?? const []),
  );

  type<LabelWidgetData>(
    location: 'package:velix_editor/metadata/widgets/label.dart:10:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "label", group: "widgets", icon: Icons.text_fields),
      JsonSerializable(discriminator: "label")
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "text"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true), 
      param<Font>('font', isNamed: true, isNullable: true, defaultValue: null), 
      param<String>('databinding', isNamed: true, isNullable: true, defaultValue: null)
    ],
    constructor: ({String type = "text", List<WidgetData> children = const [], String label = '', required Font font, String databinding = ''}) => LabelWidgetData(type: type, children: children, label: label, font: font, databinding: databinding),
    fromMapConstructor: (Map<String,dynamic> args) => LabelWidgetData(type: args['type'] as String? ?? "text", children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? '', font: args['font'] as Font?, databinding: args['databinding'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => LabelWidgetData(type: args[0] as String? ?? "text", children: args[1] as List<WidgetData>? ?? const [], label: args[2] as String? ?? '', font: args[3] as Font, databinding: args[4] as String? ?? ''),
    fields: [
      field<LabelWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as LabelWidgetData).label = value,
      ), 
      field<LabelWidgetData,Font>('font',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.font,
        setter: (obj, value) => (obj as LabelWidgetData).font = value,
        isNullable: true
      ), 
      field<LabelWidgetData,String>('databinding',
        type: StringType().optional(),
        annotations: [
          DeclareProperty(group: "general", editor: CodeEditorBuilder)
        ],
        getter: (obj) => obj.databinding,
        setter: (obj, value) => (obj as LabelWidgetData).databinding = value,
        isNullable: true
      )
    ],
  );

  type<TextWidgetData>(
    location: 'package:velix_editor/metadata/widgets/text.dart:9:1',
    superClass: widgetDataDescriptor,
    annotations: [
      DeclareWidget(name: "text", group: "widgets", icon: Icons.text_fields),
      JsonSerializable(discriminator: "text")
    ],
    params: [
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "text"), 
      param<List<WidgetData>>('children', isNamed: true, isNullable: true, defaultValue: const []), 
      param<String>('label', isNamed: true, isRequired: true), 
      param<String>('databinding', isNamed: true, isRequired: true)
    ],
    constructor: ({String type = "text", List<WidgetData> children = const [], String label = '', String databinding = ''}) => TextWidgetData(type: type, children: children, label: label, databinding: databinding),
    fromMapConstructor: (Map<String,dynamic> args) => TextWidgetData(type: args['type'] as String? ?? "text", children: args['children'] as List<WidgetData>? ?? const [], label: args['label'] as String? ?? '', databinding: args['databinding'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => TextWidgetData(type: args[0] as String? ?? "text", children: args[1] as List<WidgetData>? ?? const [], label: args[2] as String? ?? '', databinding: args[3] as String? ?? ''),
    fields: [
      field<TextWidgetData,String>('label',
        annotations: [
          DeclareProperty(group: "general")
        ],
        getter: (obj) => obj.label,
        setter: (obj, value) => (obj as TextWidgetData).label = value,
      ), 
      field<TextWidgetData,String>('databinding',
        type: StringType().optional(),
        annotations: [
          DeclareProperty(group: "general", editor: CodeEditorBuilder)
        ],
        getter: (obj) => obj.databinding,
        setter: (obj, value) => (obj as TextWidgetData).databinding = value,
        isNullable: true
      )
    ],
  );

  type<BooleanEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/bool_editor.dart:10:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => BooleanEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => BooleanEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => BooleanEditorBuilder(),
  );

  type<CodeEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/code_editor.dart:13:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => CodeEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => CodeEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => CodeEditorBuilder(),
  );

  type<FontStyleEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/font_style_editor.dart:9:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => FontStyleEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => FontStyleEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => FontStyleEditorBuilder(),
  );

  type<FontWeightEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/font_weight_editor.dart:9:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => FontWeightEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => FontWeightEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => FontWeightEditorBuilder(),
  );

  type<IntEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/int_editor.dart:10:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => IntEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => IntEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => IntEditorBuilder(),
  );

  type<PaddingEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/paddding_editor.dart:13:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => PaddingEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => PaddingEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => PaddingEditorBuilder(),
  );

  type<StringEditorBuilder>(
    location: 'package:velix_editor/property_panel/editor/string_editor.dart:9:1',
    superClass: propertyEditorBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => StringEditorBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => StringEditorBuilder(),
    fromArrayConstructor: (List<dynamic> args) => StringEditorBuilder(),
  );

  type<ButtonWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/button_widget.dart:12:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ButtonWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ButtonWidgetBuilder(),
  );

  type<ButtonEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/button_widget.dart:54:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => ButtonEditWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => ButtonEditWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => ButtonEditWidgetBuilder(),
  );

  type<ContainerEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/container_widget.dart:15:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ContainerEditWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerEditWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ContainerEditWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
  );

  type<ContainerWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/container_widget.dart:91:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    params: [
      param<TypeRegistry>('typeRegistry', isNamed: true, isRequired: true)
    ],
    constructor: ({required TypeRegistry typeRegistry}) => ContainerWidgetBuilder(typeRegistry: typeRegistry),
    fromMapConstructor: (Map<String,dynamic> args) => ContainerWidgetBuilder(typeRegistry: args['typeRegistry'] as TypeRegistry),
    fromArrayConstructor: (List<dynamic> args) => ContainerWidgetBuilder(typeRegistry: args[0] as TypeRegistry),
  );

  type<LabelWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/label_widget.dart:12:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => LabelWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => LabelWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => LabelWidgetBuilder(),
  );

  type<EditLabelWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/label_widget.dart:93:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => EditLabelWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => EditLabelWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => EditLabelWidgetBuilder(),
  );

  type<TextWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/text_widget.dart:11:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => TextWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => TextWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => TextWidgetBuilder(),
  );

  type<TextEditWidgetBuilder>(
    location: 'package:velix_editor/theme/widgets/text_widget.dart:56:1',
    superClass: widgetBuilderDescriptor,
    annotations: [
      Injectable()
    ],
    constructor: () => TextEditWidgetBuilder(),
    fromMapConstructor: (Map<String,dynamic> args) => TextEditWidgetBuilder(),
    fromArrayConstructor: (List<dynamic> args) => TextEditWidgetBuilder(),
  );

  TypeDescriptor.verify();
}
