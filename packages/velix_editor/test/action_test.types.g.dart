// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by velix registry builder
// ignore_for_file: unnecessary_import, unused_local_variable

import 'package:velix/velix.dart';
import 'action_test.dart';
import 'package:velix/reflectable/reflectable.dart';
import 'package:velix_di/di/di.dart';

void registerTypes() {
  type<TestUser>(
    location: 'asset:velix_editor/test/action_test.dart:11:1',
    params: [
      param<String>('name', isNamed: true, isRequired: true)
    ],
    constructor: ({String name = ''}) => TestUser(name: name),
    fromMapConstructor: (Map<String,dynamic> args) => TestUser(name: args['name'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => TestUser(name: args[0] as String? ?? ''),
    fields: [
      field<TestUser,String>('name',
        getter: (obj) => obj.name,
        setter: (obj, value) => (obj as TestUser).name = value,
      )
    ],
    methods: [
      method<TestUser,String>('hello',
        annotations: [
          Inject()
        ],
        invoker: (List<dynamic> args)=> (args[0] as TestUser).hello()
      )
    ],
  );

  type<TestPage>(
    location: 'asset:velix_editor/test/action_test.dart:31:1',
    annotations: [
      Injectable()
    ],
    constructor: () => TestPage(),
    fromMapConstructor: (Map<String,dynamic> args) => TestPage(),
    fromArrayConstructor: (List<dynamic> args) => TestPage(),
    fields: [
      field<TestPage,TestUser>('user',
        getter: (obj) => obj.user,
      )
    ],
    methods: [
      method<TestPage,void>('setup',
        annotations: [
          Inject()
        ],
        invoker: (List<dynamic> args)=> (args[0] as TestPage).setup()
      )
    ],
  );

  type<TestModule>(
    location: 'asset:velix_editor/test/action_test.dart:51:1',
    annotations: [
      Module(includeSiblings: false, includeSubdirectories: false)
    ],
    constructor: () => TestModule(),
    fromMapConstructor: (Map<String,dynamic> args) => TestModule(),
    fromArrayConstructor: (List<dynamic> args) => TestModule(),
  );

  TypeDescriptor.verify();
}
