// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by velix registry builder
// ignore_for_file: unnecessary_import, unused_local_variable

import 'package:velix/velix.dart';
import 'action_test.dart';
import 'package:velix/reflectable/reflectable.dart';
import 'package:velix_di/di/di.dart';

void registerTypes() {
  type<Address>(
    location: 'asset:velix_editor/test/action_test.dart:201:1',
    params: [
      param<String>('city', isNamed: true, isRequired: true), 
      param<String>('street', isNamed: true, isRequired: true)
    ],
    constructor: ({String city = '', String street = ''}) => Address(city: city, street: street),
    fromMapConstructor: (Map<String,dynamic> args) => Address(city: args['city'] as String? ?? '', street: args['street'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => Address(city: args[0] as String? ?? '', street: args[1] as String? ?? ''),
    fields: [
      field<Address,String>('city',
        getter: (obj) => obj.city,
        setter: (obj, value) => (obj as Address).city = value,
      ), 
      field<Address,String>('street',
        getter: (obj) => obj.street,
        setter: (obj, value) => (obj as Address).street = value,
      )
    ],
    methods: [
      method<Address,String>('hello',
        annotations: [
          Inject()
        ],
        parameters: [
          param<String>('message', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as Address).hello(args[1])
      )
    ],
  );

  type<Page>(
    location: 'asset:velix_editor/test/action_test.dart:244:1',
    annotations: [
      Injectable()
    ],
    constructor: () => Page(),
    fromMapConstructor: (Map<String,dynamic> args) => Page(),
    fromArrayConstructor: (List<dynamic> args) => Page(),
    fields: [
      field<Page,User>('user',
        getter: (obj) => obj.user,
      )
    ],
    methods: [
      method<Page,void>('setup',
        annotations: [
          Inject()
        ],
        invoker: (List<dynamic> args)=> (args[0] as Page).setup()
      )
    ],
  );

  type<TestModule>(
    location: 'asset:velix_editor/test/action_test.dart:264:1',
    annotations: [
      Module(includeSiblings: false, includeSubdirectories: false)
    ],
    constructor: () => TestModule(),
    fromMapConstructor: (Map<String,dynamic> args) => TestModule(),
    fromArrayConstructor: (List<dynamic> args) => TestModule(),
  );

  type<User>(
    location: 'asset:velix_editor/test/action_test.dart:222:1',
    params: [
      param<String>('name', isNamed: true, isRequired: true), 
      param<Address>('address', isNamed: true, isRequired: true)
    ],
    constructor: ({String name = '', required Address address}) => User(name: name, address: address),
    fromMapConstructor: (Map<String,dynamic> args) => User(name: args['name'] as String? ?? '', address: args['address'] as Address),
    fromArrayConstructor: (List<dynamic> args) => User(name: args[0] as String? ?? '', address: args[1] as Address),
    fields: [
      field<User,String>('name',
        getter: (obj) => obj.name,
        setter: (obj, value) => (obj as User).name = value,
      ), 
      field<User,Address>('address',
        getter: (obj) => obj.address,
        setter: (obj, value) => (obj as User).address = value,
      )
    ],
    methods: [
      method<User,String>('hello',
        annotations: [
          Inject()
        ],
        parameters: [
          param<String>('message', isRequired: true)
        ],
        invoker: (List<dynamic> args)=> (args[0] as User).hello(args[1])
      )
    ],
  );

  TypeDescriptor.verify();
}
