// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by velix registry builder
// ignore_for_file: unnecessary_import, unused_local_variable

import 'package:velix/velix.dart';
import 'model.dart';
import 'package:velix/reflectable/reflectable.dart';
import 'package:velix_mapper/mapper/json.dart';

void registerTypes() {
  type<Collections>(
    location: 'asset:velix_mapper/test/model.dart:24:1',
    params: [
      param<List<Money>>('prices', isNamed: true, isRequired: true)
    ],
    constructor: ({required List<Money> prices}) => Collections(prices: prices),
    fromMapConstructor: (Map<String,dynamic> args) => Collections(prices: args['prices'] as List<Money>),
    fromArrayConstructor: (List<dynamic> args) => Collections(prices: args[0] as List<Money>),
    fields: [
      field<Collections,List<Money>>('prices',
        elementType: Money,
        factoryConstructor: () => <Money>[],
        getter: (obj) => obj.prices,
      )
    ]
  );

  type<Invoice>(
    location: 'asset:velix_mapper/test/model.dart:49:1',
    params: [
      param<List<Product>>('products', isNamed: true, isRequired: true), 
      param<DateTime>('date', isNamed: true, isRequired: true)
    ],
    constructor: ({required List<Product> products, required DateTime date}) => Invoice(products: products, date: date),
    fromMapConstructor: (Map<String,dynamic> args) => Invoice(products: args['products'] as List<Product>, date: args['date'] as DateTime),
    fromArrayConstructor: (List<dynamic> args) => Invoice(products: args[0] as List<Product>, date: args[1] as DateTime),
    fields: [
      field<Invoice,DateTime>('date',
        getter: (obj) => obj.date,
      ), 
      field<Invoice,List<Product>>('products',
        elementType: Product,
        factoryConstructor: () => <Product>[],
        getter: (obj) => obj.products,
      )
    ]
  );

  type<MyConverter>(
    location: 'asset:velix_mapper/test/model.dart:57:1',
    constructor: () => MyConverter(),
    fromMapConstructor: (Map<String,dynamic> args) => MyConverter(),
    fromArrayConstructor: (List<dynamic> args) => MyConverter(),
  );

  type<Money>(
    location: 'asset:velix_mapper/test/model.dart:70:1',
    annotations: [
      JsonSerializable(includeNull: true)
    ],
    params: [
      param<String>('currency', isNamed: true, isRequired: true), 
      param<int>('value', isNamed: true, isRequired: true)
    ],
    constructor: ({String currency = '', int value = 0}) => Money(currency: currency, value: value),
    fromMapConstructor: (Map<String,dynamic> args) => Money(currency: args['currency'] as String? ?? '', value: args['value'] as int? ?? 0),
    fromArrayConstructor: (List<dynamic> args) => Money(currency: args[0] as String? ?? '', value: args[1] as int? ?? 0),
    fields: [
      field<Money,String>('currency',
        type: StringType().maxLength(7),
        annotations: [
          Json(name: "currency", includeNull: true, required: true, defaultValue: "EU", ignore: false, converter: MyConverter)
        ],
        getter: (obj) => obj.currency,
      ), 
      field<Money,int>('value',
        type: IntType().greaterThan(0),
        annotations: [
          Json(includeNull: true, required: true, defaultValue: 1, ignore: false)
        ],
        getter: (obj) => obj.value,
      )
    ]
  );

  var baseDescriptor =  type<Base>(
    location: 'asset:velix_mapper/test/model.dart:85:1',
    annotations: [
      JsonSerializable(includeNull: true, discriminatorField: "type", discriminator: "base")
    ],
    params: [
      param<String>('name', isNamed: true, isRequired: true), 
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "base")
    ],
    constructor: ({String name = '', String type = "base"}) => Base(name: name, type: type),
    fromMapConstructor: (Map<String,dynamic> args) => Base(name: args['name'] as String? ?? '', type: args['type'] as String? ?? "base"),
    fromArrayConstructor: (List<dynamic> args) => Base(name: args[0] as String? ?? '', type: args[1] as String? ?? "base"),
    fields: [
      field<Base,String>('type',
        getter: (obj) => obj.type,
      ), 
      field<Base,String>('name',
        getter: (obj) => obj.name,
      )
    ]
  );

  type<PolymorphCollections>(
    location: 'asset:velix_mapper/test/model.dart:102:1',
    params: [
      param<List<Base>>('bases', isNamed: true, isRequired: true)
    ],
    constructor: ({required List<Base> bases}) => PolymorphCollections(bases: bases),
    fromMapConstructor: (Map<String,dynamic> args) => PolymorphCollections(bases: args['bases'] as List<Base>),
    fromArrayConstructor: (List<dynamic> args) => PolymorphCollections(bases: args[0] as List<Base>),
    fields: [
      field<PolymorphCollections,List<Base>>('bases',
        elementType: Base,
        factoryConstructor: () => <Base>[],
        getter: (obj) => obj.bases,
      )
    ]
  );

  type<Types>(
    location: 'asset:velix_mapper/test/model.dart:112:1',
    params: [
      param<int>('int_var', isNamed: true, isRequired: true), 
      param<double>('double_var', isNamed: true, isRequired: true), 
      param<bool>('bool_var', isNamed: true, isRequired: true), 
      param<String>('string_var', isNamed: true, isRequired: true)
    ],
    constructor: ({int int_var = 0, double double_var = 0.0, bool bool_var = false, String string_var = ''}) => Types(int_var: int_var, double_var: double_var, bool_var: bool_var, string_var: string_var),
    fromMapConstructor: (Map<String,dynamic> args) => Types(int_var: args['int_var'] as int? ?? 0, double_var: args['double_var'] as double? ?? 0.0, bool_var: args['bool_var'] as bool? ?? false, string_var: args['string_var'] as String? ?? ''),
    fromArrayConstructor: (List<dynamic> args) => Types(int_var: args[0] as int? ?? 0, double_var: args[1] as double? ?? 0.0, bool_var: args[2] as bool? ?? false, string_var: args[3] as String? ?? ''),
    fields: [
      field<Types,int>('int_var',
        getter: (obj) => obj.int_var,
      ), 
      field<Types,double>('double_var',
        getter: (obj) => obj.double_var,
      ), 
      field<Types,bool>('bool_var',
        getter: (obj) => obj.bool_var,
      ), 
      field<Types,String>('string_var',
        getter: (obj) => obj.string_var,
      )
    ]
  );

  enumeration<Status>(
    name: 'asset:velix_mapper/test/model.dart.Status',
    values: Status.values
  );

  type<Mutable>(
    location: 'asset:velix_mapper/test/model.dart:7:1',
    params: [
      param<String>('id', isNamed: true, isRequired: true), 
      param<Money>('price', isNamed: true, isRequired: true), 
      param<DateTime>('dateTime', isNamed: true, isRequired: true)
    ],
    constructor: ({String id = '', required Money price, required DateTime dateTime}) => Mutable(id: id, price: price, dateTime: dateTime),
    fromMapConstructor: (Map<String,dynamic> args) => Mutable(id: args['id'] as String? ?? '', price: args['price'] as Money, dateTime: args['dateTime'] as DateTime),
    fromArrayConstructor: (List<dynamic> args) => Mutable(id: args[0] as String? ?? '', price: args[1] as Money, dateTime: args[2] as DateTime),
    fields: [
      field<Mutable,String>('id',
        type: StringType().maxLength(7),
        getter: (obj) => obj.id,
        setter: (obj, value) => (obj as Mutable).id = value,
      ), 
      field<Mutable,Money>('price',
        getter: (obj) => obj.price,
        setter: (obj, value) => (obj as Mutable).price = value,
      ), 
      field<Mutable,DateTime>('dateTime',
        type: DateTimeType().optional(),
        getter: (obj) => obj.dateTime,
        setter: (obj, value) => (obj as Mutable).dateTime = value,
        isNullable: true
      )
    ]
  );

  type<Immutable>(
    location: 'asset:velix_mapper/test/model.dart:123:1',
    params: [
      param<String>('id', isNamed: true, isRequired: true), 
      param<Money>('price', isNamed: true, isRequired: true)
    ],
    constructor: ({String id = '', required Money price}) => Immutable(id: id, price: price),
    fromMapConstructor: (Map<String,dynamic> args) => Immutable(id: args['id'] as String? ?? '', price: args['price'] as Money),
    fromArrayConstructor: (List<dynamic> args) => Immutable(id: args[0] as String? ?? '', price: args[1] as Money),
    fields: [
      field<Immutable,String>('id',
        type: StringType().maxLength(7),
        getter: (obj) => obj.id,
      ), 
      field<Immutable,Money>('price',
        getter: (obj) => obj.price,
      )
    ]
  );

  type<Derived>(
    location: 'asset:velix_mapper/test/model.dart:94:1',
    superClass: baseDescriptor,
    annotations: [
      JsonSerializable(includeNull: true, discriminator: "derived")
    ],
    params: [
      param<String>('name', isNamed: true, isRequired: true), 
      param<int>('number', isNamed: true, isRequired: true), 
      param<String>('type', isNamed: true, isNullable: true, defaultValue: "derived")
    ],
    constructor: ({String name = '', int number = 0, String type = "derived"}) => Derived(name: name, number: number, type: type),
    fromMapConstructor: (Map<String,dynamic> args) => Derived(name: args['name'] as String? ?? '', number: args['number'] as int? ?? 0, type: args['type'] as String? ?? "derived"),
    fromArrayConstructor: (List<dynamic> args) => Derived(name: args[0] as String? ?? '', number: args[1] as int? ?? 0, type: args[2] as String? ?? "derived"),
    fields: [
      field<Derived,int>('number',
        getter: (obj) => obj.number,
      )
    ]
  );

  type<Product>(
    location: 'asset:velix_mapper/test/model.dart:40:1',
    params: [
      param<String>('name', isNamed: true, isRequired: true), 
      param<Money>('price', isNamed: true, isRequired: true), 
      param<Status>('status', isNamed: true, isRequired: true)
    ],
    constructor: ({String name = '', required Money price, required Status status}) => Product(name: name, price: price, status: status),
    fromMapConstructor: (Map<String,dynamic> args) => Product(name: args['name'] as String? ?? '', price: args['price'] as Money, status: args['status'] as Status),
    fromArrayConstructor: (List<dynamic> args) => Product(name: args[0] as String? ?? '', price: args[1] as Money, status: args[2] as Status),
    fields: [
      field<Product,String>('name',
        getter: (obj) => obj.name,
        setter: (obj, value) => (obj as Product).name = value,
      ), 
      field<Product,Money>('price',
        getter: (obj) => obj.price,
        setter: (obj, value) => (obj as Product).price = value,
      ), 
      field<Product,Status>('status',
        getter: (obj) => obj.status,
        setter: (obj, value) => (obj as Product).status = value,
      )
    ]
  );

}
